#include "stdafx.h"

namespace EVulkan
{
	VkPipelineInputAssemblyStateCreateInfo TopologyList[ETopologyTypeMax] =
	{
		{ VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO, nullptr, 0, VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST, VK_FALSE },
		{ VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO, nullptr, 0, VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP, VK_FALSE },
	};

	VkViewport SrcViewportList[VULKAN_VIEWPORT_MAX] =
	{
		{ 0.0f, 0.0f, 640.0f, 480.0f, 0.0f, 1.0f },
		{ 0.0f, 25.0f, 640.0f, 430.0f, 0.0f, 1.0f },
		{ 0.0f, 25.0f, 640.0f, 430.0f, 0.0f, 1.0f },
		{ 0.0f, 0.0f, 640.0f, 432.0f, 0.0f, 1.0f },
	};
	VkViewport ViewportList[VULKAN_VIEWPORT_MAX];

	VkRect2D SrcScissorList[VULKAN_VIEWPORT_MAX] =
	{
		{ { 0, 0 }, {640, 480} },
		{ { 0, 0 }, {640, 480} },
		{ { 0, 0 }, {640, 480} },
	};
	VkRect2D ScissorList[VULKAN_VIEWPORT_MAX];

	VkPipelineRasterizationStateCreateInfo RasterizerList[ERasterizerMax] =
	{
		{ VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO, nullptr, 0, VK_FALSE, VK_FALSE, VK_POLYGON_MODE_FILL, VK_CULL_MODE_FRONT_BIT, VK_FRONT_FACE_CLOCKWISE, VK_FALSE, 0.0f, 0.0f, 0.0f, 1.0f },
		{ VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO, nullptr, 0, VK_FALSE, VK_FALSE, VK_POLYGON_MODE_FILL, VK_CULL_MODE_BACK_BIT, VK_FRONT_FACE_CLOCKWISE, VK_FALSE, 0.0f, 0.0f, 0.0f, 1.0f },
		{ VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO, nullptr, 0, VK_FALSE, VK_FALSE, VK_POLYGON_MODE_FILL, VK_CULL_MODE_NONE, VK_FRONT_FACE_CLOCKWISE, VK_FALSE, 0.0f, 0.0f, 0.0f, 1.0f },
	};

	VkPipelineColorBlendAttachmentState BlendStateAttachment[EBlendStateMax] =
	{
		{ VK_FALSE, VK_BLEND_FACTOR_ONE, VK_BLEND_FACTOR_ZERO, VK_BLEND_OP_ADD, VK_BLEND_FACTOR_ONE, VK_BLEND_FACTOR_ZERO, VK_BLEND_OP_ADD, VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT },
		{ VK_TRUE, VK_BLEND_FACTOR_SRC_ALPHA, VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA, VK_BLEND_OP_ADD, VK_BLEND_FACTOR_SRC_ALPHA, VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA, VK_BLEND_OP_ADD, VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT },
		{ VK_TRUE, VK_BLEND_FACTOR_ONE, VK_BLEND_FACTOR_ONE, VK_BLEND_OP_ADD, VK_BLEND_FACTOR_ONE, VK_BLEND_FACTOR_ONE, VK_BLEND_OP_ADD, VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT },
		{ VK_TRUE, VK_BLEND_FACTOR_ZERO, VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR, VK_BLEND_OP_ADD, VK_BLEND_FACTOR_ONE, VK_BLEND_FACTOR_ONE, VK_BLEND_OP_ADD, VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT },
		{ VK_TRUE, VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR, VK_BLEND_FACTOR_ONE, VK_BLEND_OP_ADD, VK_BLEND_FACTOR_ONE, VK_BLEND_FACTOR_ONE, VK_BLEND_OP_ADD, VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT },
		{ VK_TRUE, VK_BLEND_FACTOR_ONE, VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR, VK_BLEND_OP_ADD, VK_BLEND_FACTOR_ONE, VK_BLEND_FACTOR_ONE, VK_BLEND_OP_ADD, VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT },
		{ VK_TRUE, VK_BLEND_FACTOR_ZERO, VK_BLEND_FACTOR_ONE, VK_BLEND_OP_ADD, VK_BLEND_FACTOR_ZERO, VK_BLEND_FACTOR_ONE, VK_BLEND_OP_ADD, VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT },
	};

	VkPipelineColorBlendStateCreateInfo BlendStateList[EBlendStateMax] =
	{
		{ VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO, nullptr, 0, VK_FALSE, VK_LOGIC_OP_CLEAR, 1, &BlendStateAttachment[static_cast<mu_uint32>(EBlendState::eOne_Zero)], {1.0f, 1.0f, 1.0f, 1.0f} },
		{ VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO, nullptr, 0, VK_FALSE, VK_LOGIC_OP_CLEAR, 1, &BlendStateAttachment[static_cast<mu_uint32>(EBlendState::eAlphaSrc_InvAlphaSrc)], {1.0f, 1.0f, 1.0f, 1.0f} },
		{ VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO, nullptr, 0, VK_FALSE, VK_LOGIC_OP_CLEAR, 1, &BlendStateAttachment[static_cast<mu_uint32>(EBlendState::eOne_One)], {1.0f, 1.0f, 1.0f, 1.0f} },
		{ VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO, nullptr, 0, VK_FALSE, VK_LOGIC_OP_CLEAR, 1, &BlendStateAttachment[static_cast<mu_uint32>(EBlendState::eZero_InvColorSrc)], {1.0f, 1.0f, 1.0f, 1.0f} },
		{ VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO, nullptr, 0, VK_FALSE, VK_LOGIC_OP_CLEAR, 1, &BlendStateAttachment[static_cast<mu_uint32>(EBlendState::eInvColorSrc_One)], {1.0f, 1.0f, 1.0f, 1.0f} },
		{ VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO, nullptr, 0, VK_FALSE, VK_LOGIC_OP_CLEAR, 1, &BlendStateAttachment[static_cast<mu_uint32>(EBlendState::eOne_InvColorSrc)], {1.0f, 1.0f, 1.0f, 1.0f} },
		{ VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO, nullptr, 0, VK_FALSE, VK_LOGIC_OP_CLEAR, 1, &BlendStateAttachment[static_cast<mu_uint32>(EBlendState::eZero_ColorSrc)], {1.0f, 1.0f, 1.0f, 1.0f} },
	};

	VkPipelineDepthStencilStateCreateInfo DepthStencilList[EDepthStencilMax] =
	{
#if VULKAN_REVERSED_DEPTH == 1
		{ VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO, nullptr, 0, VK_TRUE, VK_TRUE, VK_COMPARE_OP_GREATER, VK_FALSE, VK_FALSE, {}, {}, 0.0f, 1.0f },
		{ VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO, nullptr, 0, VK_TRUE, VK_TRUE, VK_COMPARE_OP_GREATER_OR_EQUAL, VK_FALSE, VK_FALSE, {}, {}, 0.0f, 1.0f },
		// Early-Z
		{ VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO, nullptr, 0, VK_FALSE, VK_FALSE, VK_COMPARE_OP_GREATER, VK_FALSE, VK_FALSE, {}, {}, 0.0f, 1.0f },
		{ VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO, nullptr, 0, VK_TRUE, VK_FALSE, VK_COMPARE_OP_GREATER, VK_FALSE, VK_FALSE, {}, {}, 0.0f, 1.0f },
		{ VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO, nullptr, 0, VK_TRUE, VK_FALSE, VK_COMPARE_OP_GREATER_OR_EQUAL, VK_FALSE, VK_FALSE, {}, {}, 0.0f, 1.0f },
		{ VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO, nullptr, 0, VK_TRUE, VK_FALSE, VK_COMPARE_OP_GREATER_OR_EQUAL, VK_FALSE, VK_FALSE, {}, {}, 0.0f, 1.0f },
#else
		{ VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO, nullptr, 0, VK_TRUE, VK_TRUE, VK_COMPARE_OP_LESS, VK_FALSE, VK_FALSE, {}, {}, 0.0f, 1.0f },
		{ VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO, nullptr, 0, VK_TRUE, VK_TRUE, VK_COMPARE_OP_LESS_OR_EQUAL, VK_FALSE, VK_FALSE, {}, {}, 0.0f, 1.0f },
		// Early-Z
		{ VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO, nullptr, 0, VK_FALSE, VK_FALSE, VK_COMPARE_OP_LESS, VK_FALSE, VK_FALSE, {}, {}, 0.0f, 1.0f },
		{ VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO, nullptr, 0, VK_TRUE, VK_FALSE, VK_COMPARE_OP_LESS, VK_FALSE, VK_FALSE, {}, {}, 0.0f, 1.0f },
		{ VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO, nullptr, 0, VK_TRUE, VK_FALSE, VK_COMPARE_OP_LESS_OR_EQUAL, VK_FALSE, VK_FALSE, {}, {}, 0.0f, 1.0f },
		{ VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO, nullptr, 0, VK_TRUE, VK_FALSE, VK_COMPARE_OP_LESS_OR_EQUAL, VK_FALSE, VK_FALSE, {}, {}, 0.0f, 1.0f },
#endif
	};

	void AlignAtomSize(VkDeviceSize &size)
	{
		const VkDeviceSize atomSize = EVulkan::DeviceProperties.limits.nonCoherentAtomSize;
		const VkDeviceSize sizeExtra = size % atomSize;
		size += (atomSize - sizeExtra) % atomSize;
	}

	void AlignUniformSize(VkDeviceSize &size)
	{
		const VkDeviceSize atomSize = EVulkan::DeviceProperties.limits.minUniformBufferOffsetAlignment;
		const VkDeviceSize sizeExtra = size % atomSize;
		size += (atomSize - sizeExtra) % atomSize;
	}

	void AlignMappedRangeAtomSize(VkDeviceSize &offset, VkDeviceSize &size, const VkDeviceSize maxSize)
	{
		const VkDeviceSize atomSize = EVulkan::DeviceProperties.limits.nonCoherentAtomSize;
		const VkDeviceSize offsetExtra = offset % atomSize;
		offset -= offsetExtra;
		size += offsetExtra;
		const VkDeviceSize sizeExtra = size % atomSize;
		size += (atomSize - sizeExtra) % atomSize;
	}
};