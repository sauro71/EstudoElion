#include "stdafx.h"
#include "mu_uihelpersetup.h"
#include "mu_uihelpersetup_defines.h"

mu_boolean g_IsHelperStarted = false;
HELPER_SETTING g_DefaultHelperSettings;
HELPER_SETTING g_HelperSettings;

UIHelperSetup::UIHelperSetup(UISceneManager *manager) : UIBase()
{
	if (manager != nullptr)
	{
		manager->AddGFxObject(this);
	}

	_SceneManager = manager;

	UIBase::SetAspectRatio(SCREEN_WIDTH, SCREEN_HEIGHT);
	UIBase::SetPosition(HELPERSETUP_POSX, HELPERSETUP_POSY);
	UIBase::SetDimensions(HELPERSETUP_WIDTH, HELPERSETUP_HEIGHT);

	SetGfxFlag(GFX_FLAG::GFX_HIDDEN);
	SetEvent(GFX_EVENT::GFX_MOUSE_EVENT | GFX_EVENT::GFX_MOUSE_DBLCLICK_AS_CLICK);

	// Initialize
	{
		_BackFrame = new UISprite(manager, this, &INTERFACES::Data[INTERFACES::MSGBOX_BACK], SCREEN_WIDTH, SCREEN_HEIGHT, BACK_POSX, BACK_POSY, BACK_WIDTH, BACK_HEIGHT, BACK_UVBEGIN, BACK_UVEND);
		_TopFrame = new UISprite(manager, this, &INTERFACES::Data[INTERFACES::WINDOWFRAME_TOP], SCREEN_WIDTH, SCREEN_HEIGHT, TOP_POSX, TOP_POSY, TOP_WIDTH, TOP_HEIGHT);
		_TopFrame->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
		_BottomFrame = new UISprite(manager, this, &INTERFACES::Data[INTERFACES::WINDOWFRAME_BOTTOM], SCREEN_WIDTH, SCREEN_HEIGHT, BOTTOM_POSX, BOTTOM_POSY, BOTTOM_WIDTH, BOTTOM_HEIGHT);
		_BottomFrame->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
		_LeftFrame = new UISprite(manager, this, &INTERFACES::Data[INTERFACES::WINDOWFRAME_LEFT], SCREEN_WIDTH, SCREEN_HEIGHT, LEFT_POSX, LEFT_POSY, LEFT_WIDTH, LEFT_HEIGHT);
		_LeftFrame->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
		_RightFrame = new UISprite(manager, this, &INTERFACES::Data[INTERFACES::WINDOWFRAME_RIGHT], SCREEN_WIDTH, SCREEN_HEIGHT, RIGHT_POSX, RIGHT_POSY, RIGHT_WIDTH, RIGHT_HEIGHT);
		_RightFrame->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);

		_XButton = new UIButton(GAMEUI::MESSAGE_HELPERSETUP_CLOSE_BUTTON, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, XBUTTON_POSX, XBUTTON_POSY, XBUTTON_WIDTH, XBUTTON_HEIGHT);

		_CloseButton = new UIButton(GAMEUI::MESSAGE_HELPERSETUP_CLOSE_BUTTON, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, CLOSE_POSX, CLOSE_POSY, CLOSE_WIDTH, CLOSE_HEIGHT);
		_CloseButton->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
		_CloseButton->SetStateData(UIButton::UI_DISABLED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::EXIT_BUTTON], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(100, 100, 100, 255)));
		_CloseButton->SetStateData(UIButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::EXIT_BUTTON], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(255, 255, 255, 255)));
		_CloseButton->SetStateData(UIButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::EXIT_BUTTON], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(255, 255, 255, 255)));
		_CloseButton->SetStateData(UIButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::EXIT_BUTTON], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(255, 255, 255, 255)));
		_CloseButton->SetTooltip(FONT_NORMAL, GlobalText[388], MU::MakeARGB(255, 255, 255, 255), MU::MakeARGB(0, 0, 0, 180), true);

		_ResetButton = new UIButton(GAMEUI::MESSAGE_HELPERSETUP_RESET_BUTTON, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, RESET_POSX, RESET_POSY, RESET_WIDTH, RESET_HEIGHT);
		_ResetButton->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
		_ResetButton->SetStateData(UIButton::UI_DISABLED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::EMPTY_ROUND], TUV_THREE_NORMAL_BEGIN, TUV_THREE_NORMAL_END, MU::MakeARGB(100, 100, 100, 255)));
		_ResetButton->SetStateData(UIButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::EMPTY_ROUND], TUV_THREE_NORMAL_BEGIN, TUV_THREE_NORMAL_END, MU::MakeARGB(255, 255, 255, 255)));
		_ResetButton->SetStateData(UIButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::EMPTY_ROUND], TUV_THREE_OVER_BEGIN, TUV_THREE_OVER_END, MU::MakeARGB(255, 255, 255, 255)));
		_ResetButton->SetStateData(UIButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::EMPTY_ROUND], TUV_THREE_PRESSED_BEGIN, TUV_THREE_PRESSED_END, MU::MakeARGB(255, 255, 255, 255)));
		_ResetButton->SetStateText(UIButton::UI_DISABLED, FONT_NORMAL, GlobalText[3504], MU::MakeARGB(170, 170, 170, 255), MU::MakeARGB(0, 0, 0, 0), -1.5f);
		_ResetButton->SetStateText(UIButton::UI_NORMAL, FONT_NORMAL, GlobalText[3504], MU::MakeARGB(200, 200, 200, 255), MU::MakeARGB(0, 0, 0, 0), -1.5f);
		_ResetButton->SetStateText(UIButton::UI_OVER, FONT_NORMAL, GlobalText[3504], MU::MakeARGB(255, 255, 255, 255), MU::MakeARGB(0, 0, 0, 0), -1.5f);
		_ResetButton->SetStateText(UIButton::UI_PRESSED, FONT_NORMAL, GlobalText[3504], MU::MakeARGB(200, 200, 200, 255), MU::MakeARGB(0, 0, 0, 0), -1.5f);

		_SaveButton = new UIButton(GAMEUI::MESSAGE_HELPERSETUP_SAVE_BUTTON, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, SAVE_POSX, SAVE_POSY, SAVE_WIDTH, SAVE_HEIGHT);
		_SaveButton->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
		_SaveButton->SetStateData(UIButton::UI_DISABLED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::EMPTY_ROUND], TUV_THREE_NORMAL_BEGIN, TUV_THREE_NORMAL_END, MU::MakeARGB(100, 100, 100, 255)));
		_SaveButton->SetStateData(UIButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::EMPTY_ROUND], TUV_THREE_NORMAL_BEGIN, TUV_THREE_NORMAL_END, MU::MakeARGB(255, 255, 255, 255)));
		_SaveButton->SetStateData(UIButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::EMPTY_ROUND], TUV_THREE_OVER_BEGIN, TUV_THREE_OVER_END, MU::MakeARGB(255, 255, 255, 255)));
		_SaveButton->SetStateData(UIButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::EMPTY_ROUND], TUV_THREE_PRESSED_BEGIN, TUV_THREE_PRESSED_END, MU::MakeARGB(255, 255, 255, 255)));
		_SaveButton->SetStateText(UIButton::UI_DISABLED, FONT_NORMAL, GlobalText[3503], MU::MakeARGB(170, 170, 170, 255), MU::MakeARGB(0, 0, 0, 0), -1.5f);
		_SaveButton->SetStateText(UIButton::UI_NORMAL, FONT_NORMAL, GlobalText[3503], MU::MakeARGB(200, 200, 200, 255), MU::MakeARGB(0, 0, 0, 0), -1.5f);
		_SaveButton->SetStateText(UIButton::UI_OVER, FONT_NORMAL, GlobalText[3503], MU::MakeARGB(255, 255, 255, 255), MU::MakeARGB(0, 0, 0, 0), -1.5f);
		_SaveButton->SetStateText(UIButton::UI_PRESSED, FONT_NORMAL, GlobalText[3503], MU::MakeARGB(200, 200, 200, 255), MU::MakeARGB(0, 0, 0, 0), -1.5f);

		mu_uint32 tabsText[TAB_MAX] =
		{
			3500,
			3501,
		};
		for (mu_uint32 n = 0; n < TAB_MAX; ++n)
		{
			_Tabs[n] = new UIRadioButton(GAMEUI::MESSAGE_HELPERSETUP_TAB_BEGIN + n, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, TAB_POSX(n), TAB_POSY, TAB_WIDTH, TAB_HEIGHT);

			_Tabs[n]->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_Tabs[n]->SetStateData(UIRadioButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::GUILD_BTN_TAB4], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(180, 180, 180, 255)));
			_Tabs[n]->SetStateData(UIRadioButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::GUILD_BTN_TAB4], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(255, 255, 255, 255)));
			_Tabs[n]->SetStateData(UIRadioButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::GUILD_BTN_TAB4], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(255, 255, 255, 255)));
			_Tabs[n]->SetStateData(UIRadioButton::UI_PRESSED_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::GUILD_BTN_TAB4], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(255, 255, 255, 255)));

			_Tabs[n]->SetStateText(UIRadioButton::UI_DISABLED, FONT_NORMAL, GlobalText[tabsText[n]], MU::MakeARGB(100, 100, 100, 255));
			_Tabs[n]->SetStateText(UIRadioButton::UI_NORMAL, FONT_NORMAL, GlobalText[tabsText[n]], MU::MakeARGB(150, 150, 150, 255));
			_Tabs[n]->SetStateText(UIRadioButton::UI_OVER, FONT_NORMAL, GlobalText[tabsText[n]], MU::MakeARGB(200, 200, 200, 255));
			_Tabs[n]->SetStateText(UIRadioButton::UI_PRESSED, FONT_NORMAL, GlobalText[tabsText[n]], MU::MakeARGB(255, 255, 255, 255));
			_Tabs[n]->SetStateText(UIRadioButton::UI_PRESSED_OVER, FONT_NORMAL, GlobalText[tabsText[n]], MU::MakeARGB(255, 255, 255, 255));
		}

		// Tab Frame
		{
			_DFBackground = new UISprite(manager, this, &INTERFACES::Data[INTERFACES::LOGIN_SERVER_EX03], SCREEN_WIDTH, SCREEN_HEIGHT, DFBACK_POSX, DFBACK_POSY, DFBACK_WIDTH, DFBACK_HEIGHT, BACK_UVBEGIN, BACK_UVEND);
			_DFBackground->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_DFTopFrame = new UISprite(manager, this, &INTERFACES::Data[INTERFACES::LOGIN_SERVER_EX01], SCREEN_WIDTH, SCREEN_HEIGHT, DFTOP_POSX, DFTOP_POSY, DFTOP_WIDTH, DFTOP_HEIGHT, EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f));
			_DFTopFrame->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_DFBottomFrame = new UISprite(manager, this, &INTERFACES::Data[INTERFACES::LOGIN_SERVER_EX01], SCREEN_WIDTH, SCREEN_HEIGHT, DFBOTTOM_POSX, DFBOTTOM_POSY, DFBOTTOM_WIDTH, DFBOTTOM_HEIGHT, EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f));
			_DFBottomFrame->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_DFLeftFrame = new UISprite(manager, this, &INTERFACES::Data[INTERFACES::LOGIN_SERVER_EX02], SCREEN_WIDTH, SCREEN_HEIGHT, DFLEFT_POSX, DFLEFT_POSY, DFLEFT_WIDTH, DFLEFT_HEIGHT, EVector2(0.0f, 0.0f), EVector2(0.5f, 1.0f));
			_DFLeftFrame->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_DFRightFrame = new UISprite(manager, this, &INTERFACES::Data[INTERFACES::LOGIN_SERVER_EX02], SCREEN_WIDTH, SCREEN_HEIGHT, DFRIGHT_POSX, DFRIGHT_POSY, DFRIGHT_WIDTH, DFRIGHT_HEIGHT, EVector2(0.5f, 0.0f), EVector2(1.0f, 1.0f));
			_DFRightFrame->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
		}

		// Hunting Tab
		{
			_HTDivs[0] = new UISprite(manager, this, &INTERFACES::Data[INTERFACES::LOGIN_SERVER_EX02], SCREEN_WIDTH, SCREEN_HEIGHT, HTDIV1_POSX, HTDIV1_POSY, HTDIV1_WIDTH, HTDIV1_HEIGHT, EVector2(0.0f, 0.0f), EVector2(0.5f, 1.0f));
			_HTDivs[0]->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_HTDivs[1] = new UISprite(manager, this, &INTERFACES::Data[INTERFACES::LOGIN_SERVER_EX01], SCREEN_WIDTH, SCREEN_HEIGHT, HTDIV2_POSX, HTDIV2_POSY, HTDIV2_WIDTH, HTDIV2_HEIGHT, EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f));
			_HTDivs[1]->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_HTDivs[2] = new UISprite(manager, this, &INTERFACES::Data[INTERFACES::LOGIN_SERVER_EX01], SCREEN_WIDTH, SCREEN_HEIGHT, HTDIV3_POSX, HTDIV3_POSY, HTDIV3_WIDTH, HTDIV3_HEIGHT, EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f));
			_HTDivs[2]->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_HTDivs[3] = new UISprite(manager, this, &INTERFACES::Data[INTERFACES::LOGIN_SERVER_EX01], SCREEN_WIDTH, SCREEN_HEIGHT, HTDIV4_POSX, HTDIV4_POSY, HTDIV4_WIDTH, HTDIV4_HEIGHT, EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f));
			_HTDivs[3]->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);

			_HTRange = new UISprite(manager, this, &INTERFACES::Data[INTERFACES::CRYWOLF_RANK_1], SCREEN_WIDTH, SCREEN_HEIGHT, HTRANGE_POSX, HTRANGE_POSY, HTRANGE_WIDTH, HTRANGE_HEIGHT);
			_HTRange->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);

			_HTRangePlusBtn = new UIButton(GAMEUI::MESSAGE_HELPERSETUP_HTRANGEPLUS_BUTTON, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, HTRANGEPLUS_POSX, HTRANGEPLUS_POSY, HTRANGEPLUS_WIDTH, HTRANGEPLUS_HEIGHT);
			_HTRangePlusBtn->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_HTRangePlusBtn->SetStateData(UIButton::UI_DISABLED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::CHARFRAME_BTN_STAT], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(100, 100, 100, 255)));
			_HTRangePlusBtn->SetStateData(UIButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::CHARFRAME_BTN_STAT], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(200, 200, 200, 255)));
			_HTRangePlusBtn->SetStateData(UIButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::CHARFRAME_BTN_STAT], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(255, 255, 255, 255)));
			_HTRangePlusBtn->SetStateData(UIButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::CHARFRAME_BTN_STAT], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(255, 255, 255, 255)));

			_HTRangeMinusBtn = new UIButton(GAMEUI::MESSAGE_HELPERSETUP_HTRANGEMINUS_BUTTON, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, HTRANGEMINUS_POSX, HTRANGEMINUS_POSY, HTRANGEMINUS_WIDTH, HTRANGEMINUS_HEIGHT);
			_HTRangeMinusBtn->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_HTRangeMinusBtn->SetStateData(UIButton::UI_DISABLED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::MACROUI_RANGEMINUS], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(100, 100, 100, 255)));
			_HTRangeMinusBtn->SetStateData(UIButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::MACROUI_RANGEMINUS], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(200, 200, 200, 255)));
			_HTRangeMinusBtn->SetStateData(UIButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::MACROUI_RANGEMINUS], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(255, 255, 255, 255)));
			_HTRangeMinusBtn->SetStateData(UIButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::MACROUI_RANGEMINUS], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(255, 255, 255, 255)));

			_HTPotionCheckBox = new UIToggleButton(GAMEUI::MESSAGE_HELPERSETUP_HTPOTION_BUTTON, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, HTPOTION_POSX, HTPOTION_POSY, HTPOTION_WIDTH, HTPOTION_HEIGHT);
			_HTPotionCheckBox->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_HTPotionCheckBox->SetStateData(UIToggleButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(200, 200, 200, 255)));
			_HTPotionCheckBox->SetStateData(UIToggleButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(255, 255, 255, 255)));
			_HTPotionCheckBox->SetStateData(UIToggleButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(200, 200, 200, 255)));
			_HTPotionCheckBox->SetStateData(UIToggleButton::UI_PRESSED_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(255, 255, 255, 255)));
			_HTPotionCheckBox->ChangeState(UIToggleButton::UI_PRESSED);

			_HTPotionSettingBtn = new UIButton(GAMEUI::MESSAGE_HELPERSETUP_HTPOTION_SETTING_BUTTON, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, HTPOTION_SETTING_POSX, HTPOTION_SETTING_POSY, HTPOTION_SETTING_WIDTH, HTPOTION_SETTING_HEIGHT);
			_HTPotionSettingBtn->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_HTPotionSettingBtn->SetStateData(UIButton::UI_DISABLED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::EMPTY_ROUND], TUV_THREE_NORMAL_BEGIN, TUV_THREE_NORMAL_END, MU::MakeARGB(100, 100, 100, 255)));
			_HTPotionSettingBtn->SetStateData(UIButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::EMPTY_ROUND], TUV_THREE_NORMAL_BEGIN, TUV_THREE_NORMAL_END, MU::MakeARGB(255, 255, 255, 255)));
			_HTPotionSettingBtn->SetStateData(UIButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::EMPTY_ROUND], TUV_THREE_OVER_BEGIN, TUV_THREE_OVER_END, MU::MakeARGB(255, 255, 255, 255)));
			_HTPotionSettingBtn->SetStateData(UIButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::EMPTY_ROUND], TUV_THREE_PRESSED_BEGIN, TUV_THREE_PRESSED_END, MU::MakeARGB(255, 255, 255, 255)));
			_HTPotionSettingBtn->SetStateText(UIButton::UI_DISABLED, FONT_NORMAL, GlobalText[3502], MU::MakeARGB(170, 170, 170, 255), MU::MakeARGB(0, 0, 0, 0), -1.5f);
			_HTPotionSettingBtn->SetStateText(UIButton::UI_NORMAL, FONT_NORMAL, GlobalText[3502], MU::MakeARGB(200, 200, 200, 255), MU::MakeARGB(0, 0, 0, 0), -1.5f);
			_HTPotionSettingBtn->SetStateText(UIButton::UI_OVER, FONT_NORMAL, GlobalText[3502], MU::MakeARGB(255, 255, 255, 255), MU::MakeARGB(0, 0, 0, 0), -1.5f);
			_HTPotionSettingBtn->SetStateText(UIButton::UI_PRESSED, FONT_NORMAL, GlobalText[3502], MU::MakeARGB(200, 200, 200, 255), MU::MakeARGB(0, 0, 0, 0), -1.5f);

			_HTAutoHealCheckBox = new UIToggleButton(GAMEUI::MESSAGE_HELPERSETUP_HTAUTOHEAL_BUTTON, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, HTAUTOHEAL_POSX, HTAUTOHEAL_POSY, HTAUTOHEAL_WIDTH, HTAUTOHEAL_HEIGHT);
			_HTAutoHealCheckBox->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_HTAutoHealCheckBox->SetStateData(UIToggleButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(200, 200, 200, 255)));
			_HTAutoHealCheckBox->SetStateData(UIToggleButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(255, 255, 255, 255)));
			_HTAutoHealCheckBox->SetStateData(UIToggleButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(200, 200, 200, 255)));
			_HTAutoHealCheckBox->SetStateData(UIToggleButton::UI_PRESSED_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(255, 255, 255, 255)));

			_HTPartyCheckBox = new UIToggleButton(GAMEUI::MESSAGE_HELPERSETUP_HTPARTY_BUTTON, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, HTPARTY_POSX, HTPARTY_POSY, HTPARTY_WIDTH, HTPARTY_HEIGHT);
			_HTPartyCheckBox->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_HTPartyCheckBox->SetStateData(UIToggleButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(200, 200, 200, 255)));
			_HTPartyCheckBox->SetStateData(UIToggleButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(255, 255, 255, 255)));
			_HTPartyCheckBox->SetStateData(UIToggleButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(200, 200, 200, 255)));
			_HTPartyCheckBox->SetStateData(UIToggleButton::UI_PRESSED_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(255, 255, 255, 255)));

			_HTPartySettingBtn = new UIButton(GAMEUI::MESSAGE_HELPERSETUP_HTPARTY_SETTING_BUTTON, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, HTPARTY_SETTING_POSX, HTPARTY_SETTING_POSY, HTPARTY_SETTING_WIDTH, HTPARTY_SETTING_HEIGHT);
			_HTPartySettingBtn->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_HTPartySettingBtn->SetStateData(UIButton::UI_DISABLED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::EMPTY_ROUND], TUV_THREE_NORMAL_BEGIN, TUV_THREE_NORMAL_END, MU::MakeARGB(100, 100, 100, 255)));
			_HTPartySettingBtn->SetStateData(UIButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::EMPTY_ROUND], TUV_THREE_NORMAL_BEGIN, TUV_THREE_NORMAL_END, MU::MakeARGB(255, 255, 255, 255)));
			_HTPartySettingBtn->SetStateData(UIButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::EMPTY_ROUND], TUV_THREE_OVER_BEGIN, TUV_THREE_OVER_END, MU::MakeARGB(255, 255, 255, 255)));
			_HTPartySettingBtn->SetStateData(UIButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::EMPTY_ROUND], TUV_THREE_PRESSED_BEGIN, TUV_THREE_PRESSED_END, MU::MakeARGB(255, 255, 255, 255)));
			_HTPartySettingBtn->SetStateText(UIButton::UI_DISABLED, FONT_NORMAL, GlobalText[3502], MU::MakeARGB(170, 170, 170, 255), MU::MakeARGB(0, 0, 0, 0), -1.5f);
			_HTPartySettingBtn->SetStateText(UIButton::UI_NORMAL, FONT_NORMAL, GlobalText[3502], MU::MakeARGB(200, 200, 200, 255), MU::MakeARGB(0, 0, 0, 0), -1.5f);
			_HTPartySettingBtn->SetStateText(UIButton::UI_OVER, FONT_NORMAL, GlobalText[3502], MU::MakeARGB(255, 255, 255, 255), MU::MakeARGB(0, 0, 0, 0), -1.5f);
			_HTPartySettingBtn->SetStateText(UIButton::UI_PRESSED, FONT_NORMAL, GlobalText[3502], MU::MakeARGB(200, 200, 200, 255), MU::MakeARGB(0, 0, 0, 0), -1.5f);

			_HTRegularAttackCheckBox = new UIToggleButton(GAMEUI::MESSAGE_HELPERSETUP_HTREGULARATTACK_BUTTON, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, HTREGULARATTACK_POSX, HTREGULARATTACK_POSY, HTREGULARATTACK_WIDTH, HTREGULARATTACK_HEIGHT);
			_HTRegularAttackCheckBox->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_HTRegularAttackCheckBox->SetStateData(UIToggleButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(200, 200, 200, 255)));
			_HTRegularAttackCheckBox->SetStateData(UIToggleButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(255, 255, 255, 255)));
			_HTRegularAttackCheckBox->SetStateData(UIToggleButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(200, 200, 200, 255)));
			_HTRegularAttackCheckBox->SetStateData(UIToggleButton::UI_PRESSED_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(255, 255, 255, 255)));

			_HTSkillsCloselyCheckBox = new UIToggleButton(GAMEUI::MESSAGE_HELPERSETUP_HTSKILLSCLOSELY_BUTTON, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, HTSKILLSCLOSELY_POSX, HTSKILLSCLOSELY_POSY, HTSKILLSCLOSELY_WIDTH, HTSKILLSCLOSELY_HEIGHT);
			_HTSkillsCloselyCheckBox->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_HTSkillsCloselyCheckBox->SetStateData(UIToggleButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(200, 200, 200, 255)));
			_HTSkillsCloselyCheckBox->SetStateData(UIToggleButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(255, 255, 255, 255)));
			_HTSkillsCloselyCheckBox->SetStateData(UIToggleButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(200, 200, 200, 255)));
			_HTSkillsCloselyCheckBox->SetStateData(UIToggleButton::UI_PRESSED_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(255, 255, 255, 255)));

			_HTLongDistCheckBox = new UIToggleButton(GAMEUI::MESSAGE_HELPERSETUP_HTLONGDIST_BUTTON, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, HTLONGDIST_POSX, HTLONGDIST_POSY, HTLONGDIST_WIDTH, HTLONGDIST_HEIGHT);
			_HTLongDistCheckBox->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_HTLongDistCheckBox->SetStateData(UIToggleButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(200, 200, 200, 255)));
			_HTLongDistCheckBox->SetStateData(UIToggleButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(255, 255, 255, 255)));
			_HTLongDistCheckBox->SetStateData(UIToggleButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(200, 200, 200, 255)));
			_HTLongDistCheckBox->SetStateData(UIToggleButton::UI_PRESSED_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(255, 255, 255, 255)));

			_HTReturnPosCheckBox = new UIToggleButton(GAMEUI::MESSAGE_HELPERSETUP_HTORIGPOS_BUTTON, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, HTORIGPOS_POSX, HTORIGPOS_POSY, HTORIGPOS_WIDTH, HTORIGPOS_HEIGHT);
			_HTReturnPosCheckBox->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_HTReturnPosCheckBox->SetStateData(UIToggleButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(200, 200, 200, 255)));
			_HTReturnPosCheckBox->SetStateData(UIToggleButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(255, 255, 255, 255)));
			_HTReturnPosCheckBox->SetStateData(UIToggleButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(200, 200, 200, 255)));
			_HTReturnPosCheckBox->SetStateData(UIToggleButton::UI_PRESSED_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(255, 255, 255, 255)));
			_HTReturnPosCheckBox->ChangeState(UIToggleButton::UI_PRESSED);

			_HTReturnTimeBack = new UISprite(manager, this, &INTERFACES::Data[INTERFACES::MACROUI_INPUTNUMBER], SCREEN_WIDTH, SCREEN_HEIGHT, HTRETURNTIME_POSX, HTRETURNTIME_POSY, HTRETURNTIME_WIDTH, HTRETURNTIME_HEIGHT);
			_HTReturnTimeBack->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_HTReturnTimeEditBox = new UIEditBox(GAMEUI::MESSAGE_HELPERSETUP_HTRETURNTIME_EDITBOX, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, HTRETURNTIME_POSX + 3.5f, HTRETURNTIME_POSY + 3.0f, HTRETURNTIME_WIDTH - 7.0f, HTRETURNTIME_HEIGHT - 6.0f);
			_HTReturnTimeEditBox->SetTextColor(0, 0, 0, 255);
			_HTReturnTimeEditBox->SetBackColor(0, 0, 0, 0);
			_HTReturnTimeEditBox->SetHighlightTextColor(0, 0, 0, 255);
			_HTReturnTimeEditBox->SetHighlightColor(150, 150, 150, 255);
			_HTReturnTimeEditBox->SetCaretColor(200, 200, 200, 255);
			_HTReturnTimeEditBox->MarkStyle(UIEditBox::UES_NUMBER);
			_HTReturnTimeEditBox->SetLimitText(3);
			_HTReturnTimeEditBox->SetText(_T("10"));

			_HTSkillBtn[BUTTON_SKILLINDEX::BSI_BASIC] = new UIButton(GAMEUI::MESSAGE_HELPERSETUP_HTSKILLBTN_BEGIN + 0, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, HTBASICSKILL_POSX, HTBASICSKILL_POSY, HTBASICSKILL_WIDTH, HTBASICSKILL_HEIGHT);
			_HTSkillBtn[BUTTON_SKILLINDEX::BSI_BASIC]->SetStateData(UIButton::UI_DISABLED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::MAINFRAME_SKILLBOX1], TUV_ONE_BEGIN, TUV_ONE_END, MU::MakeARGB(100, 100, 100, 255)));
			_HTSkillBtn[BUTTON_SKILLINDEX::BSI_BASIC]->SetStateData(UIButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::MAINFRAME_SKILLBOX1], TUV_ONE_BEGIN, TUV_ONE_END, MU::MakeARGB(200, 200, 200, 255)));
			_HTSkillBtn[BUTTON_SKILLINDEX::BSI_BASIC]->SetStateData(UIButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::MAINFRAME_SKILLBOX1], TUV_ONE_BEGIN, TUV_ONE_END, MU::MakeARGB(255, 255, 255, 255)));
			_HTSkillBtn[BUTTON_SKILLINDEX::BSI_BASIC]->SetStateData(UIButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::MAINFRAME_SKILLBOX1], TUV_ONE_BEGIN, TUV_ONE_END, MU::MakeARGB(200, 200, 200, 255)));

			_HTSkillIcon[BUTTON_SKILLINDEX::BSI_BASIC] = new UISprite(manager, this, nullptr, SCREEN_WIDTH, SCREEN_HEIGHT, HTBASICSKILL_ICON_POSX, HTBASICSKILL_ICON_POSY, HTBASICSKILL_ICON_WIDTH, HTBASICSKILL_ICON_HEIGHT);

			_HTSkillBtn[BUTTON_SKILLINDEX::BSI_ACT1] = new UIButton(GAMEUI::MESSAGE_HELPERSETUP_HTSKILLBTN_BEGIN + 1, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, HTACTSKILL1_POSX, HTACTSKILL1_POSY, HTACTSKILL1_WIDTH, HTACTSKILL1_HEIGHT);
			_HTSkillBtn[BUTTON_SKILLINDEX::BSI_ACT1]->SetStateData(UIButton::UI_DISABLED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::MAINFRAME_SKILLBOX1], TUV_ONE_BEGIN, TUV_ONE_END, MU::MakeARGB(100, 100, 100, 255)));
			_HTSkillBtn[BUTTON_SKILLINDEX::BSI_ACT1]->SetStateData(UIButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::MAINFRAME_SKILLBOX1], TUV_ONE_BEGIN, TUV_ONE_END, MU::MakeARGB(200, 200, 200, 255)));
			_HTSkillBtn[BUTTON_SKILLINDEX::BSI_ACT1]->SetStateData(UIButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::MAINFRAME_SKILLBOX1], TUV_ONE_BEGIN, TUV_ONE_END, MU::MakeARGB(255, 255, 255, 255)));
			_HTSkillBtn[BUTTON_SKILLINDEX::BSI_ACT1]->SetStateData(UIButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::MAINFRAME_SKILLBOX1], TUV_ONE_BEGIN, TUV_ONE_END, MU::MakeARGB(200, 200, 200, 255)));

			_HTSkillIcon[BUTTON_SKILLINDEX::BSI_ACT1] = new UISprite(manager, this, nullptr, SCREEN_WIDTH, SCREEN_HEIGHT, HTACTSKILL1_ICON_POSX, HTACTSKILL1_ICON_POSY, HTACTSKILL1_ICON_WIDTH, HTACTSKILL1_ICON_HEIGHT);

			_HTActSkill1DelayCheckBox = new UIToggleButton(GAMEUI::MESSAGE_HELPERSETUP_HTACTSKILL1_DELAY_BUTTON, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, HTACTSKILL1_DELAY_POSX, HTACTSKILL1_DELAY_POSY, HTACTSKILL1_DELAY_WIDTH, HTACTSKILL1_DELAY_HEIGHT);
			_HTActSkill1DelayCheckBox->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_HTActSkill1DelayCheckBox->SetStateData(UIToggleButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(200, 200, 200, 255)));
			_HTActSkill1DelayCheckBox->SetStateData(UIToggleButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(255, 255, 255, 255)));
			_HTActSkill1DelayCheckBox->SetStateData(UIToggleButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(200, 200, 200, 255)));
			_HTActSkill1DelayCheckBox->SetStateData(UIToggleButton::UI_PRESSED_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(255, 255, 255, 255)));

			_HTActSkill1DelayBack = new UISprite(manager, this, &INTERFACES::Data[INTERFACES::MACROUI_INPUTNUMBER], SCREEN_WIDTH, SCREEN_HEIGHT, HTACTSKILL1_DELAYTIME_POSX, HTACTSKILL1_DELAYTIME_POSY, HTACTSKILL1_DELAYTIME_WIDTH, HTACTSKILL1_DELAYTIME_HEIGHT);
			_HTActSkill1DelayBack->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_HTActSkill1DelayEditBox = new UIEditBox(GAMEUI::MESSAGE_HELPERSETUP_HTACTSKILL1_DELAYTIME_EDITBOX, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, HTACTSKILL1_DELAYTIME_POSX + 3.5f, HTACTSKILL1_DELAYTIME_POSY + 3.0f, HTACTSKILL1_DELAYTIME_WIDTH - 7.0f, HTACTSKILL1_DELAYTIME_HEIGHT - 6.0f);
			_HTActSkill1DelayEditBox->SetTextColor(0, 0, 0, 255);
			_HTActSkill1DelayEditBox->SetBackColor(0, 0, 0, 0);
			_HTActSkill1DelayEditBox->SetHighlightTextColor(0, 0, 0, 255);
			_HTActSkill1DelayEditBox->SetHighlightColor(150, 150, 150, 255);
			_HTActSkill1DelayEditBox->SetCaretColor(200, 200, 200, 255);
			_HTActSkill1DelayEditBox->MarkStyle(UIEditBox::UES_NUMBER);
			_HTActSkill1DelayEditBox->SetLimitText(3);
			_HTActSkill1DelayEditBox->SetText(_T("0"));

			_HTActSkill1ConCheckBox = new UIToggleButton(GAMEUI::MESSAGE_HELPERSETUP_HTACTSKILL1_CON_BUTTON, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, HTACTSKILL1_CON_POSX, HTACTSKILL1_CON_POSY, HTACTSKILL1_CON_WIDTH, HTACTSKILL1_CON_HEIGHT);
			_HTActSkill1ConCheckBox->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_HTActSkill1ConCheckBox->SetStateData(UIToggleButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(200, 200, 200, 255)));
			_HTActSkill1ConCheckBox->SetStateData(UIToggleButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(255, 255, 255, 255)));
			_HTActSkill1ConCheckBox->SetStateData(UIToggleButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(200, 200, 200, 255)));
			_HTActSkill1ConCheckBox->SetStateData(UIToggleButton::UI_PRESSED_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(255, 255, 255, 255)));

			_HTActSkill1ConSettingBtn = new UIButton(GAMEUI::MESSAGE_HELPERSETUP_HTACTSKILL1_CON_SETTING_BUTTON, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, HTACTSKILL1_CON_SETTING_POSX, HTACTSKILL1_CON_SETTING_POSY, HTACTSKILL1_CON_SETTING_WIDTH, HTACTSKILL1_CON_SETTING_HEIGHT);
			_HTActSkill1ConSettingBtn->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_HTActSkill1ConSettingBtn->SetStateData(UIButton::UI_DISABLED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::EMPTY_ROUND], TUV_THREE_NORMAL_BEGIN, TUV_THREE_NORMAL_END, MU::MakeARGB(100, 100, 100, 255)));
			_HTActSkill1ConSettingBtn->SetStateData(UIButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::EMPTY_ROUND], TUV_THREE_NORMAL_BEGIN, TUV_THREE_NORMAL_END, MU::MakeARGB(255, 255, 255, 255)));
			_HTActSkill1ConSettingBtn->SetStateData(UIButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::EMPTY_ROUND], TUV_THREE_OVER_BEGIN, TUV_THREE_OVER_END, MU::MakeARGB(255, 255, 255, 255)));
			_HTActSkill1ConSettingBtn->SetStateData(UIButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::EMPTY_ROUND], TUV_THREE_PRESSED_BEGIN, TUV_THREE_PRESSED_END, MU::MakeARGB(255, 255, 255, 255)));
			_HTActSkill1ConSettingBtn->SetStateText(UIButton::UI_DISABLED, FONT_NORMAL, GlobalText[3502], MU::MakeARGB(170, 170, 170, 255), MU::MakeARGB(0, 0, 0, 0), -1.5f);
			_HTActSkill1ConSettingBtn->SetStateText(UIButton::UI_NORMAL, FONT_NORMAL, GlobalText[3502], MU::MakeARGB(200, 200, 200, 255), MU::MakeARGB(0, 0, 0, 0), -1.5f);
			_HTActSkill1ConSettingBtn->SetStateText(UIButton::UI_OVER, FONT_NORMAL, GlobalText[3502], MU::MakeARGB(255, 255, 255, 255), MU::MakeARGB(0, 0, 0, 0), -1.5f);
			_HTActSkill1ConSettingBtn->SetStateText(UIButton::UI_PRESSED, FONT_NORMAL, GlobalText[3502], MU::MakeARGB(200, 200, 200, 255), MU::MakeARGB(0, 0, 0, 0), -1.5f);

			_HTSkillBtn[BUTTON_SKILLINDEX::BSI_ACT2] = new UIButton(GAMEUI::MESSAGE_HELPERSETUP_HTSKILLBTN_BEGIN + 2, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, HTACTSKILL2_POSX, HTACTSKILL2_POSY, HTACTSKILL2_WIDTH, HTACTSKILL2_HEIGHT);
			_HTSkillBtn[BUTTON_SKILLINDEX::BSI_ACT2]->SetStateData(UIButton::UI_DISABLED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::MAINFRAME_SKILLBOX1], TUV_ONE_BEGIN, TUV_ONE_END, MU::MakeARGB(100, 100, 100, 255)));
			_HTSkillBtn[BUTTON_SKILLINDEX::BSI_ACT2]->SetStateData(UIButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::MAINFRAME_SKILLBOX1], TUV_ONE_BEGIN, TUV_ONE_END, MU::MakeARGB(200, 200, 200, 255)));
			_HTSkillBtn[BUTTON_SKILLINDEX::BSI_ACT2]->SetStateData(UIButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::MAINFRAME_SKILLBOX1], TUV_ONE_BEGIN, TUV_ONE_END, MU::MakeARGB(255, 255, 255, 255)));
			_HTSkillBtn[BUTTON_SKILLINDEX::BSI_ACT2]->SetStateData(UIButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::MAINFRAME_SKILLBOX1], TUV_ONE_BEGIN, TUV_ONE_END, MU::MakeARGB(200, 200, 200, 255)));

			_HTSkillIcon[BUTTON_SKILLINDEX::BSI_ACT2] = new UISprite(manager, this, nullptr, SCREEN_WIDTH, SCREEN_HEIGHT, HTACTSKILL2_ICON_POSX, HTACTSKILL2_ICON_POSY, HTACTSKILL2_ICON_WIDTH, HTACTSKILL2_ICON_HEIGHT);

			_HTActSkill2DelayCheckBox = new UIToggleButton(GAMEUI::MESSAGE_HELPERSETUP_HTACTSKILL2_DELAY_BUTTON, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, HTACTSKILL2_DELAY_POSX, HTACTSKILL2_DELAY_POSY, HTACTSKILL2_DELAY_WIDTH, HTACTSKILL2_DELAY_HEIGHT);
			_HTActSkill2DelayCheckBox->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_HTActSkill2DelayCheckBox->SetStateData(UIToggleButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(200, 200, 200, 255)));
			_HTActSkill2DelayCheckBox->SetStateData(UIToggleButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(255, 255, 255, 255)));
			_HTActSkill2DelayCheckBox->SetStateData(UIToggleButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(200, 200, 200, 255)));
			_HTActSkill2DelayCheckBox->SetStateData(UIToggleButton::UI_PRESSED_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(255, 255, 255, 255)));

			_HTActSkill2DelayBack = new UISprite(manager, this, &INTERFACES::Data[INTERFACES::MACROUI_INPUTNUMBER], SCREEN_WIDTH, SCREEN_HEIGHT, HTACTSKILL2_DELAYTIME_POSX, HTACTSKILL2_DELAYTIME_POSY, HTACTSKILL2_DELAYTIME_WIDTH, HTACTSKILL2_DELAYTIME_HEIGHT);
			_HTActSkill2DelayBack->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_HTActSkill2DelayEditBox = new UIEditBox(GAMEUI::MESSAGE_HELPERSETUP_HTACTSKILL2_DELAYTIME_EDITBOX, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, HTACTSKILL2_DELAYTIME_POSX + 3.5f, HTACTSKILL2_DELAYTIME_POSY + 3.0f, HTACTSKILL2_DELAYTIME_WIDTH - 7.0f, HTACTSKILL2_DELAYTIME_HEIGHT - 6.0f);
			_HTActSkill2DelayEditBox->SetTextColor(0, 0, 0, 255);
			_HTActSkill2DelayEditBox->SetBackColor(0, 0, 0, 0);
			_HTActSkill2DelayEditBox->SetHighlightTextColor(0, 0, 0, 255);
			_HTActSkill2DelayEditBox->SetHighlightColor(150, 150, 150, 255);
			_HTActSkill2DelayEditBox->SetCaretColor(200, 200, 200, 255);
			_HTActSkill2DelayEditBox->MarkStyle(UIEditBox::UES_NUMBER);
			_HTActSkill2DelayEditBox->SetLimitText(3);
			_HTActSkill2DelayEditBox->SetText(_T("0"));

			_HTActSkill2ConCheckBox = new UIToggleButton(GAMEUI::MESSAGE_HELPERSETUP_HTACTSKILL2_CON_BUTTON, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, HTACTSKILL2_CON_POSX, HTACTSKILL2_CON_POSY, HTACTSKILL2_CON_WIDTH, HTACTSKILL2_CON_HEIGHT);
			_HTActSkill2ConCheckBox->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_HTActSkill2ConCheckBox->SetStateData(UIToggleButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(200, 200, 200, 255)));
			_HTActSkill2ConCheckBox->SetStateData(UIToggleButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(255, 255, 255, 255)));
			_HTActSkill2ConCheckBox->SetStateData(UIToggleButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(200, 200, 200, 255)));
			_HTActSkill2ConCheckBox->SetStateData(UIToggleButton::UI_PRESSED_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(255, 255, 255, 255)));

			_HTActSkill2ConSettingBtn = new UIButton(GAMEUI::MESSAGE_HELPERSETUP_HTACTSKILL2_CON_SETTING_BUTTON, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, HTACTSKILL2_CON_SETTING_POSX, HTACTSKILL2_CON_SETTING_POSY, HTACTSKILL2_CON_SETTING_WIDTH, HTACTSKILL2_CON_SETTING_HEIGHT);
			_HTActSkill2ConSettingBtn->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_HTActSkill2ConSettingBtn->SetStateData(UIButton::UI_DISABLED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::EMPTY_ROUND], TUV_THREE_NORMAL_BEGIN, TUV_THREE_NORMAL_END, MU::MakeARGB(100, 100, 100, 255)));
			_HTActSkill2ConSettingBtn->SetStateData(UIButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::EMPTY_ROUND], TUV_THREE_NORMAL_BEGIN, TUV_THREE_NORMAL_END, MU::MakeARGB(255, 255, 255, 255)));
			_HTActSkill2ConSettingBtn->SetStateData(UIButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::EMPTY_ROUND], TUV_THREE_OVER_BEGIN, TUV_THREE_OVER_END, MU::MakeARGB(255, 255, 255, 255)));
			_HTActSkill2ConSettingBtn->SetStateData(UIButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::EMPTY_ROUND], TUV_THREE_PRESSED_BEGIN, TUV_THREE_PRESSED_END, MU::MakeARGB(255, 255, 255, 255)));
			_HTActSkill2ConSettingBtn->SetStateText(UIButton::UI_DISABLED, FONT_NORMAL, GlobalText[3502], MU::MakeARGB(170, 170, 170, 255), MU::MakeARGB(0, 0, 0, 0), -1.5f);
			_HTActSkill2ConSettingBtn->SetStateText(UIButton::UI_NORMAL, FONT_NORMAL, GlobalText[3502], MU::MakeARGB(200, 200, 200, 255), MU::MakeARGB(0, 0, 0, 0), -1.5f);
			_HTActSkill2ConSettingBtn->SetStateText(UIButton::UI_OVER, FONT_NORMAL, GlobalText[3502], MU::MakeARGB(255, 255, 255, 255), MU::MakeARGB(0, 0, 0, 0), -1.5f);
			_HTActSkill2ConSettingBtn->SetStateText(UIButton::UI_PRESSED, FONT_NORMAL, GlobalText[3502], MU::MakeARGB(200, 200, 200, 255), MU::MakeARGB(0, 0, 0, 0), -1.5f);

			_HTComboCheckBox = new UIToggleButton(GAMEUI::MESSAGE_HELPERSETUP_HTCOMBO_BUTTON, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, HTCOMBO_POSX, HTCOMBO_POSY, HTCOMBO_WIDTH, HTCOMBO_HEIGHT);
			_HTComboCheckBox->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_HTComboCheckBox->SetStateData(UIToggleButton::UI_DISABLED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(100, 100, 100, 255)));
			_HTComboCheckBox->SetStateData(UIToggleButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(200, 200, 200, 255)));
			_HTComboCheckBox->SetStateData(UIToggleButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(255, 255, 255, 255)));
			_HTComboCheckBox->SetStateData(UIToggleButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(200, 200, 200, 255)));
			_HTComboCheckBox->SetStateData(UIToggleButton::UI_PRESSED_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(255, 255, 255, 255)));

			_HTBuffDurCheckBox = new UIToggleButton(GAMEUI::MESSAGE_HELPERSETUP_HTBUFFDUR_BUTTON, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, HTBUFFDUR_POSX, HTBUFFDUR_POSY, HTBUFFDUR_WIDTH, HTBUFFDUR_HEIGHT);
			_HTBuffDurCheckBox->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_HTBuffDurCheckBox->SetStateData(UIToggleButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(200, 200, 200, 255)));
			_HTBuffDurCheckBox->SetStateData(UIToggleButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(255, 255, 255, 255)));
			_HTBuffDurCheckBox->SetStateData(UIToggleButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(200, 200, 200, 255)));
			_HTBuffDurCheckBox->SetStateData(UIToggleButton::UI_PRESSED_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(255, 255, 255, 255)));

			_HTSkillBtn[BUTTON_SKILLINDEX::BSI_BUFF1] = new UIButton(GAMEUI::MESSAGE_HELPERSETUP_HTSKILLBTN_BEGIN + 3, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, HTBUFFSKILL1_POSX, HTBUFFSKILL1_POSY, HTBUFFSKILL1_WIDTH, HTBUFFSKILL1_HEIGHT);
			_HTSkillBtn[BUTTON_SKILLINDEX::BSI_BUFF1]->SetStateData(UIButton::UI_DISABLED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::MAINFRAME_SKILLBOX1], TUV_ONE_BEGIN, TUV_ONE_END, MU::MakeARGB(100, 100, 100, 255)));
			_HTSkillBtn[BUTTON_SKILLINDEX::BSI_BUFF1]->SetStateData(UIButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::MAINFRAME_SKILLBOX1], TUV_ONE_BEGIN, TUV_ONE_END, MU::MakeARGB(200, 200, 200, 255)));
			_HTSkillBtn[BUTTON_SKILLINDEX::BSI_BUFF1]->SetStateData(UIButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::MAINFRAME_SKILLBOX1], TUV_ONE_BEGIN, TUV_ONE_END, MU::MakeARGB(255, 255, 255, 255)));
			_HTSkillBtn[BUTTON_SKILLINDEX::BSI_BUFF1]->SetStateData(UIButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::MAINFRAME_SKILLBOX1], TUV_ONE_BEGIN, TUV_ONE_END, MU::MakeARGB(200, 200, 200, 255)));

			_HTSkillIcon[BUTTON_SKILLINDEX::BSI_BUFF1] = new UISprite(manager, this, nullptr, SCREEN_WIDTH, SCREEN_HEIGHT, HTBUFFSKILL1_ICON_POSX, HTBUFFSKILL1_ICON_POSY, HTBUFFSKILL1_ICON_WIDTH, HTBUFFSKILL1_ICON_HEIGHT);

			_HTSkillBtn[BUTTON_SKILLINDEX::BSI_BUFF2] = new UIButton(GAMEUI::MESSAGE_HELPERSETUP_HTSKILLBTN_BEGIN + 4, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, HTBUFFSKILL2_POSX, HTBUFFSKILL2_POSY, HTBUFFSKILL2_WIDTH, HTBUFFSKILL2_HEIGHT);
			_HTSkillBtn[BUTTON_SKILLINDEX::BSI_BUFF2]->SetStateData(UIButton::UI_DISABLED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::MAINFRAME_SKILLBOX1], TUV_ONE_BEGIN, TUV_ONE_END, MU::MakeARGB(100, 100, 100, 255)));
			_HTSkillBtn[BUTTON_SKILLINDEX::BSI_BUFF2]->SetStateData(UIButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::MAINFRAME_SKILLBOX1], TUV_ONE_BEGIN, TUV_ONE_END, MU::MakeARGB(200, 200, 200, 255)));
			_HTSkillBtn[BUTTON_SKILLINDEX::BSI_BUFF2]->SetStateData(UIButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::MAINFRAME_SKILLBOX1], TUV_ONE_BEGIN, TUV_ONE_END, MU::MakeARGB(255, 255, 255, 255)));
			_HTSkillBtn[BUTTON_SKILLINDEX::BSI_BUFF2]->SetStateData(UIButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::MAINFRAME_SKILLBOX1], TUV_ONE_BEGIN, TUV_ONE_END, MU::MakeARGB(200, 200, 200, 255)));

			_HTSkillIcon[BUTTON_SKILLINDEX::BSI_BUFF2] = new UISprite(manager, this, nullptr, SCREEN_WIDTH, SCREEN_HEIGHT, HTBUFFSKILL2_ICON_POSX, HTBUFFSKILL2_ICON_POSY, HTBUFFSKILL2_ICON_WIDTH, HTBUFFSKILL2_ICON_HEIGHT);

			_HTSkillBtn[BUTTON_SKILLINDEX::BSI_BUFF3] = new UIButton(GAMEUI::MESSAGE_HELPERSETUP_HTSKILLBTN_BEGIN + 5, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, HTBUFFSKILL3_POSX, HTBUFFSKILL3_POSY, HTBUFFSKILL3_WIDTH, HTBUFFSKILL3_HEIGHT);
			_HTSkillBtn[BUTTON_SKILLINDEX::BSI_BUFF3]->SetStateData(UIButton::UI_DISABLED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::MAINFRAME_SKILLBOX1], TUV_ONE_BEGIN, TUV_ONE_END, MU::MakeARGB(100, 100, 100, 255)));
			_HTSkillBtn[BUTTON_SKILLINDEX::BSI_BUFF3]->SetStateData(UIButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::MAINFRAME_SKILLBOX1], TUV_ONE_BEGIN, TUV_ONE_END, MU::MakeARGB(200, 200, 200, 255)));
			_HTSkillBtn[BUTTON_SKILLINDEX::BSI_BUFF3]->SetStateData(UIButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::MAINFRAME_SKILLBOX1], TUV_ONE_BEGIN, TUV_ONE_END, MU::MakeARGB(255, 255, 255, 255)));
			_HTSkillBtn[BUTTON_SKILLINDEX::BSI_BUFF3]->SetStateData(UIButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::MAINFRAME_SKILLBOX1], TUV_ONE_BEGIN, TUV_ONE_END, MU::MakeARGB(200, 200, 200, 255)));

			_HTSkillIcon[BUTTON_SKILLINDEX::BSI_BUFF3] = new UISprite(manager, this, nullptr, SCREEN_WIDTH, SCREEN_HEIGHT, HTBUFFSKILL3_ICON_POSX, HTBUFFSKILL3_ICON_POSY, HTBUFFSKILL3_ICON_WIDTH, HTBUFFSKILL3_ICON_HEIGHT);
		}

		// Obtaining Tab
		{
			_OBDivs[0] = new UISprite(manager, this, &INTERFACES::Data[INTERFACES::LOGIN_SERVER_EX02], SCREEN_WIDTH, SCREEN_HEIGHT, OBDIV1_POSX, OBDIV1_POSY, OBDIV1_WIDTH, OBDIV1_HEIGHT, EVector2(0.0f, 0.0f), EVector2(0.5f, 1.0f));
			_OBDivs[0]->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_OBDivs[1] = new UISprite(manager, this, &INTERFACES::Data[INTERFACES::LOGIN_SERVER_EX01], SCREEN_WIDTH, SCREEN_HEIGHT, OBDIV2_POSX, OBDIV2_POSY, OBDIV2_WIDTH, OBDIV2_HEIGHT, EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f));
			_OBDivs[1]->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_OBDivs[2] = new UISprite(manager, this, &INTERFACES::Data[INTERFACES::LOGIN_SERVER_EX01], SCREEN_WIDTH, SCREEN_HEIGHT, OBDIV3_POSX, OBDIV3_POSY, OBDIV3_WIDTH, OBDIV3_HEIGHT, EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f));
			_OBDivs[2]->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_OBDivs[3] = new UISprite(manager, this, &INTERFACES::Data[INTERFACES::LOGIN_SERVER_EX01], SCREEN_WIDTH, SCREEN_HEIGHT, OBDIV4_POSX, OBDIV4_POSY, OBDIV4_WIDTH, OBDIV4_HEIGHT, EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f));
			_OBDivs[3]->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);

			_OBRange = new UISprite(manager, this, &INTERFACES::Data[INTERFACES::CRYWOLF_RANK_1], SCREEN_WIDTH, SCREEN_HEIGHT, OBRANGE_POSX, OBRANGE_POSY, OBRANGE_WIDTH, OBRANGE_HEIGHT);
			_OBRange->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);

			_OBRangePlusBtn = new UIButton(GAMEUI::MESSAGE_HELPERSETUP_OBRANGEPLUS_BUTTON, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, OBRANGEPLUS_POSX, OBRANGEPLUS_POSY, OBRANGEPLUS_WIDTH, OBRANGEPLUS_HEIGHT);
			_OBRangePlusBtn->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_OBRangePlusBtn->SetStateData(UIButton::UI_DISABLED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::CHARFRAME_BTN_STAT], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(100, 100, 100, 255)));
			_OBRangePlusBtn->SetStateData(UIButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::CHARFRAME_BTN_STAT], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(200, 200, 200, 255)));
			_OBRangePlusBtn->SetStateData(UIButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::CHARFRAME_BTN_STAT], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(255, 255, 255, 255)));
			_OBRangePlusBtn->SetStateData(UIButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::CHARFRAME_BTN_STAT], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(255, 255, 255, 255)));

			_OBRangeMinusBtn = new UIButton(GAMEUI::MESSAGE_HELPERSETUP_OBRANGEMINUS_BUTTON, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, OBRANGEMINUS_POSX, OBRANGEMINUS_POSY, OBRANGEMINUS_WIDTH, OBRANGEMINUS_HEIGHT);
			_OBRangeMinusBtn->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_OBRangeMinusBtn->SetStateData(UIButton::UI_DISABLED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::MACROUI_RANGEMINUS], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(100, 100, 100, 255)));
			_OBRangeMinusBtn->SetStateData(UIButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::MACROUI_RANGEMINUS], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(200, 200, 200, 255)));
			_OBRangeMinusBtn->SetStateData(UIButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::MACROUI_RANGEMINUS], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(255, 255, 255, 255)));
			_OBRangeMinusBtn->SetStateData(UIButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::MACROUI_RANGEMINUS], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(255, 255, 255, 255)));

			_OBRepairCheckBox = new UIToggleButton(GAMEUI::MESSAGE_HELPERSETUP_OBREPAIR_BUTTON, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, OBREPAIR_POSX, OBREPAIR_POSY, OBREPAIR_WIDTH, OBREPAIR_HEIGHT);
			_OBRepairCheckBox->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_OBRepairCheckBox->SetStateData(UIToggleButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(200, 200, 200, 255)));
			_OBRepairCheckBox->SetStateData(UIToggleButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(255, 255, 255, 255)));
			_OBRepairCheckBox->SetStateData(UIToggleButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(200, 200, 200, 255)));
			_OBRepairCheckBox->SetStateData(UIToggleButton::UI_PRESSED_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(255, 255, 255, 255)));

			_OBPickAllCheckBox = new UIToggleButton(GAMEUI::MESSAGE_HELPERSETUP_OBPICKALL_BUTTON, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, OBPICKALL_POSX, OBPICKALL_POSY, OBPICKALL_WIDTH, OBPICKALL_HEIGHT);
			_OBPickAllCheckBox->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_OBPickAllCheckBox->SetStateData(UIToggleButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(200, 200, 200, 255)));
			_OBPickAllCheckBox->SetStateData(UIToggleButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(255, 255, 255, 255)));
			_OBPickAllCheckBox->SetStateData(UIToggleButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(200, 200, 200, 255)));
			_OBPickAllCheckBox->SetStateData(UIToggleButton::UI_PRESSED_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(255, 255, 255, 255)));

			_OBPickSelCheckBox = new UIToggleButton(GAMEUI::MESSAGE_HELPERSETUP_OBPICKSEL_BUTTON, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, OBPICKSEL_POSX, OBPICKSEL_POSY, OBPICKSEL_WIDTH, OBPICKSEL_HEIGHT);
			_OBPickSelCheckBox->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_OBPickSelCheckBox->SetStateData(UIToggleButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(200, 200, 200, 255)));
			_OBPickSelCheckBox->SetStateData(UIToggleButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(255, 255, 255, 255)));
			_OBPickSelCheckBox->SetStateData(UIToggleButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(200, 200, 200, 255)));
			_OBPickSelCheckBox->SetStateData(UIToggleButton::UI_PRESSED_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(255, 255, 255, 255)));

			_OBJewelCheckBox = new UIToggleButton(GAMEUI::MESSAGE_HELPERSETUP_OBJEWEL_BUTTON, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, OBJEWEL_POSX, OBJEWEL_POSY, OBJEWEL_WIDTH, OBJEWEL_HEIGHT);
			_OBJewelCheckBox->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_OBJewelCheckBox->SetStateData(UIToggleButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(200, 200, 200, 255)));
			_OBJewelCheckBox->SetStateData(UIToggleButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(255, 255, 255, 255)));
			_OBJewelCheckBox->SetStateData(UIToggleButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(200, 200, 200, 255)));
			_OBJewelCheckBox->SetStateData(UIToggleButton::UI_PRESSED_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(255, 255, 255, 255)));

			_OBSetItemCheckBox = new UIToggleButton(GAMEUI::MESSAGE_HELPERSETUP_OBSETITEM_BUTTON, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, OBSETITEM_POSX, OBSETITEM_POSY, OBSETITEM_WIDTH, OBSETITEM_HEIGHT);
			_OBSetItemCheckBox->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_OBSetItemCheckBox->SetStateData(UIToggleButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(200, 200, 200, 255)));
			_OBSetItemCheckBox->SetStateData(UIToggleButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(255, 255, 255, 255)));
			_OBSetItemCheckBox->SetStateData(UIToggleButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(200, 200, 200, 255)));
			_OBSetItemCheckBox->SetStateData(UIToggleButton::UI_PRESSED_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(255, 255, 255, 255)));

			_OBZenCheckBox = new UIToggleButton(GAMEUI::MESSAGE_HELPERSETUP_OBZEN_BUTTON, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, OBZEN_POSX, OBZEN_POSY, OBZEN_WIDTH, OBZEN_HEIGHT);
			_OBZenCheckBox->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_OBZenCheckBox->SetStateData(UIToggleButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(200, 200, 200, 255)));
			_OBZenCheckBox->SetStateData(UIToggleButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(255, 255, 255, 255)));
			_OBZenCheckBox->SetStateData(UIToggleButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(200, 200, 200, 255)));
			_OBZenCheckBox->SetStateData(UIToggleButton::UI_PRESSED_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(255, 255, 255, 255)));

			_OBExcCheckBox = new UIToggleButton(GAMEUI::MESSAGE_HELPERSETUP_OBEXC_BUTTON, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, OBEXC_POSX, OBEXC_POSY, OBEXC_WIDTH, OBEXC_HEIGHT);
			_OBExcCheckBox->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_OBExcCheckBox->SetStateData(UIToggleButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(200, 200, 200, 255)));
			_OBExcCheckBox->SetStateData(UIToggleButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(255, 255, 255, 255)));
			_OBExcCheckBox->SetStateData(UIToggleButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(200, 200, 200, 255)));
			_OBExcCheckBox->SetStateData(UIToggleButton::UI_PRESSED_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(255, 255, 255, 255)));

			_OBExtraCheckBox = new UIToggleButton(GAMEUI::MESSAGE_HELPERSETUP_OBEXTRA_BUTTON, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, OBEXTRA_POSX, OBEXTRA_POSY, OBEXTRA_WIDTH, OBEXTRA_HEIGHT);
			_OBExtraCheckBox->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_OBExtraCheckBox->SetStateData(UIToggleButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(200, 200, 200, 255)));
			_OBExtraCheckBox->SetStateData(UIToggleButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.5f), EVector2(1.0f, 1.0f), MU::MakeARGB(255, 255, 255, 255)));
			_OBExtraCheckBox->SetStateData(UIToggleButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(200, 200, 200, 255)));
			_OBExtraCheckBox->SetStateData(UIToggleButton::UI_PRESSED_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::OPTION_CHECK], EVector2(0.0f, 0.0f), EVector2(1.0f, 0.5f), MU::MakeARGB(255, 255, 255, 255)));
		
			TGLAYOUT_PREPARE(OBItemsBox, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, OBITEMSBOX_POSX, OBITEMSBOX_POSY, OBITEMSBOX_WIDTH, OBITEMSBOX_HEIGHT);

			_OBItemAddBtn = new UIButton(GAMEUI::MESSAGE_HELPERSETUP_OBITEMADD_BUTTON, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, OBITEMADD_POSX, OBITEMADD_POSY, OBITEMADD_WIDTH, OBITEMADD_HEIGHT);
			_OBItemAddBtn->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_OBItemAddBtn->SetStateData(UIButton::UI_DISABLED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::EMPTY_ROUND], TUV_THREE_NORMAL_BEGIN, TUV_THREE_NORMAL_END, MU::MakeARGB(100, 100, 100, 255)));
			_OBItemAddBtn->SetStateData(UIButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::EMPTY_ROUND], TUV_THREE_NORMAL_BEGIN, TUV_THREE_NORMAL_END, MU::MakeARGB(255, 255, 255, 255)));
			_OBItemAddBtn->SetStateData(UIButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::EMPTY_ROUND], TUV_THREE_OVER_BEGIN, TUV_THREE_OVER_END, MU::MakeARGB(255, 255, 255, 255)));
			_OBItemAddBtn->SetStateData(UIButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::EMPTY_ROUND], TUV_THREE_PRESSED_BEGIN, TUV_THREE_PRESSED_END, MU::MakeARGB(255, 255, 255, 255)));
			_OBItemAddBtn->SetStateText(UIButton::UI_DISABLED, FONT_NORMAL, GlobalText[3505], MU::MakeARGB(170, 170, 170, 255), MU::MakeARGB(0, 0, 0, 0), -1.5f);
			_OBItemAddBtn->SetStateText(UIButton::UI_NORMAL, FONT_NORMAL, GlobalText[3505], MU::MakeARGB(200, 200, 200, 255), MU::MakeARGB(0, 0, 0, 0), -1.5f);
			_OBItemAddBtn->SetStateText(UIButton::UI_OVER, FONT_NORMAL, GlobalText[3505], MU::MakeARGB(255, 255, 255, 255), MU::MakeARGB(0, 0, 0, 0), -1.5f);
			_OBItemAddBtn->SetStateText(UIButton::UI_PRESSED, FONT_NORMAL, GlobalText[3505], MU::MakeARGB(200, 200, 200, 255), MU::MakeARGB(0, 0, 0, 0), -1.5f);

			_OBItemModBtn = new UIButton(GAMEUI::MESSAGE_HELPERSETUP_OBITEMMOD_BUTTON, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, OBITEMMOD_POSX, OBITEMMOD_POSY, OBITEMMOD_WIDTH, OBITEMMOD_HEIGHT);
			_OBItemModBtn->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_OBItemModBtn->SetStateData(UIButton::UI_DISABLED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::EMPTY_ROUND], TUV_THREE_NORMAL_BEGIN, TUV_THREE_NORMAL_END, MU::MakeARGB(100, 100, 100, 255)));
			_OBItemModBtn->SetStateData(UIButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::EMPTY_ROUND], TUV_THREE_NORMAL_BEGIN, TUV_THREE_NORMAL_END, MU::MakeARGB(255, 255, 255, 255)));
			_OBItemModBtn->SetStateData(UIButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::EMPTY_ROUND], TUV_THREE_OVER_BEGIN, TUV_THREE_OVER_END, MU::MakeARGB(255, 255, 255, 255)));
			_OBItemModBtn->SetStateData(UIButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::EMPTY_ROUND], TUV_THREE_PRESSED_BEGIN, TUV_THREE_PRESSED_END, MU::MakeARGB(255, 255, 255, 255)));
			_OBItemModBtn->SetStateText(UIButton::UI_DISABLED, FONT_NORMAL, GlobalText[15101], MU::MakeARGB(170, 170, 170, 255), MU::MakeARGB(0, 0, 0, 0), -1.5f);
			_OBItemModBtn->SetStateText(UIButton::UI_NORMAL, FONT_NORMAL, GlobalText[15101], MU::MakeARGB(200, 200, 200, 255), MU::MakeARGB(0, 0, 0, 0), -1.5f);
			_OBItemModBtn->SetStateText(UIButton::UI_OVER, FONT_NORMAL, GlobalText[15101], MU::MakeARGB(255, 255, 255, 255), MU::MakeARGB(0, 0, 0, 0), -1.5f);
			_OBItemModBtn->SetStateText(UIButton::UI_PRESSED, FONT_NORMAL, GlobalText[15101], MU::MakeARGB(200, 200, 200, 255), MU::MakeARGB(0, 0, 0, 0), -1.5f);

			_OBItemDelBtn = new UIButton(GAMEUI::MESSAGE_HELPERSETUP_OBITEMDEL_BUTTON, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, OBITEMDEL_POSX, OBITEMDEL_POSY, OBITEMDEL_WIDTH, OBITEMDEL_HEIGHT);
			_OBItemDelBtn->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
			_OBItemDelBtn->SetStateData(UIButton::UI_DISABLED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::EMPTY_ROUND], TUV_THREE_NORMAL_BEGIN, TUV_THREE_NORMAL_END, MU::MakeARGB(100, 100, 100, 255)));
			_OBItemDelBtn->SetStateData(UIButton::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::EMPTY_ROUND], TUV_THREE_NORMAL_BEGIN, TUV_THREE_NORMAL_END, MU::MakeARGB(255, 255, 255, 255)));
			_OBItemDelBtn->SetStateData(UIButton::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::EMPTY_ROUND], TUV_THREE_OVER_BEGIN, TUV_THREE_OVER_END, MU::MakeARGB(255, 255, 255, 255)));
			_OBItemDelBtn->SetStateData(UIButton::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::EMPTY_ROUND], TUV_THREE_PRESSED_BEGIN, TUV_THREE_PRESSED_END, MU::MakeARGB(255, 255, 255, 255)));
			_OBItemDelBtn->SetStateText(UIButton::UI_DISABLED, FONT_NORMAL, GlobalText[3506], MU::MakeARGB(170, 170, 170, 255), MU::MakeARGB(0, 0, 0, 0), -1.5f);
			_OBItemDelBtn->SetStateText(UIButton::UI_NORMAL, FONT_NORMAL, GlobalText[3506], MU::MakeARGB(200, 200, 200, 255), MU::MakeARGB(0, 0, 0, 0), -1.5f);
			_OBItemDelBtn->SetStateText(UIButton::UI_OVER, FONT_NORMAL, GlobalText[3506], MU::MakeARGB(255, 255, 255, 255), MU::MakeARGB(0, 0, 0, 0), -1.5f);
			_OBItemDelBtn->SetStateText(UIButton::UI_PRESSED, FONT_NORMAL, GlobalText[3506], MU::MakeARGB(200, 200, 200, 255), MU::MakeARGB(0, 0, 0, 0), -1.5f);
		
			_OBItemsScrollBar = new UIScrollBar(GAMEUI::MESSAGE_HELPERSETUP_OBITEMS_SCROLLBAR, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, OBITEMSCROLL_POSX, OBITEMSCROLL_POSY, UIScrollBar::ORI_VERTICAL);
			_OBItemsScrollBar->ConfigureTop(&INTERFACES::Data[INTERFACES::SCROLLBAR_TOP], EBlendState::eAlphaSrc_InvAlphaSrc, OBITEMSCROLL_BACKWIDTH, OBITEMSCROLL_TOP_BOTTOM_PART_HEIGHT);
			_OBItemsScrollBar->ConfigureMiddle(&INTERFACES::Data[INTERFACES::SCROLLBAR_MIDDLE], EBlendState::eAlphaSrc_InvAlphaSrc, OBITEMSCROLL_BACKWIDTH, OBITEMSCROLL_LINESHEIGHT);
			_OBItemsScrollBar->ConfigureBottom(&INTERFACES::Data[INTERFACES::SCROLLBAR_BOTTOM], EBlendState::eAlphaSrc_InvAlphaSrc, OBITEMSCROLL_BACKWIDTH, OBITEMSCROLL_TOP_BOTTOM_PART_HEIGHT);
			_OBItemsScrollBar->ConfigureScroll(EBlendState::eAlphaSrc_InvAlphaSrc, OBITEMSCROLL_BTN_WIDTH, OBITEMSCROLL_BTN_HEIGHT, true);

			_OBItemsScrollBar->SetStateData(UIScrollBar::UI_DISABLED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::SCROLLBAR_SLIDE_OFF], EVector2(0.0f, 0.0f), EVector2(1.0f, 1.0f), MU::MakeARGB(255, 255, 255, 255)));
			_OBItemsScrollBar->SetStateData(UIScrollBar::UI_NORMAL, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::SCROLLBAR_SLIDE_ON], EVector2(0.0f, 0.0f), EVector2(1.0f, 1.0f), MU::MakeARGB(255, 255, 255, 255)));
			_OBItemsScrollBar->SetStateData(UIScrollBar::UI_OVER, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::SCROLLBAR_SLIDE_ON], EVector2(0.0f, 0.0f), EVector2(1.0f, 1.0f), MU::MakeARGB(255, 255, 255, 255)));
			_OBItemsScrollBar->SetStateData(UIScrollBar::UI_PRESSED, UI_STATE_DATA(&INTERFACES::Data[INTERFACES::SCROLLBAR_SLIDE_ON], EVector2(0.0f, 0.0f), EVector2(1.0f, 1.0f), MU::MakeARGB(178, 178, 178, 255)));

			_OBItemsScrollBar->ConfigureScrollInfo(0.0f, 1.0f, 0.0f);
			_OBItemsScrollBar->ConfigureScrollDimension(OBITEMSCROLL_LINESHEIGHT);
			_OBItemsScrollBar->ChangeState(UIScrollBar::UI_DISABLED);
			_OBItemsScrollBar->SetMessageInheritor(this);

			_OBItemsScrollBar->ApplyChanges();

			for (mu_uint32 n = 0; n < MAX_HELPERSETUP_OBITEMSHOW; ++n)
			{
				_OBItemsListBtn[n] = new UIRadioButton(GAMEUI::MESSAGE_HELPERSETUP_OBITEMS_BEGIN + n, manager, this, SCREEN_WIDTH, SCREEN_HEIGHT, OBITEMLIST_POSX, OBITEMLIST_POSY(n), OBITEMLIST_WIDTH, OBITEMLIST_HEIGHT);
				_OBItemsListBtn[n]->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc);
				_OBItemsListBtn[n]->SetStateData(UIRadioButton::UI_NORMAL, UI_STATE_DATA(USE_COLOR_STATE, EVector2(0.0f, 0.0f), EVector2(1.0f, 1.0f), MU::MakeARGB(0, 0, 0, 0)));
				_OBItemsListBtn[n]->SetStateData(UIRadioButton::UI_OVER, UI_STATE_DATA(USE_COLOR_STATE, EVector2(0.0f, 0.0f), EVector2(1.0f, 1.0f), MU::MakeARGB(0, 51, 204, 150)));
				_OBItemsListBtn[n]->SetStateData(UIRadioButton::UI_PRESSED, UI_STATE_DATA(USE_COLOR_STATE, EVector2(0.0f, 0.0f), EVector2(1.0f, 1.0f), MU::MakeARGB(0, 51, 204, 110)));
				_OBItemsListBtn[n]->SetStateData(UIRadioButton::UI_PRESSED_OVER, UI_STATE_DATA(USE_COLOR_STATE, EVector2(0.0f, 0.0f), EVector2(1.0f, 1.0f), MU::MakeARGB(0, 51, 204, 150)));
				_OBItemsListBtn[n]->SetRouteToParent(true);
			}

			_OBItemSelected = -1;
			_OBItemListIndex = 0;
		}

		SetCurrentTab(TAB_HUNTING);
	}
}

UIHelperSetup::~UIHelperSetup()
{

}

void UIHelperSetup::ConfigureObtainScroll(mu_boolean keepScroll)
{
	mu_boolean isEnabledScroll = _OBItemsScrollBar->GetState() != UIScrollBar::UI_DISABLED;
	HELPER_OBTAININGSETTINGEX &obtainSettings = _InternalSetting.Obtaining;

	if (obtainSettings.ExtraItems.size() > MAX_HELPERSETUP_OBITEMSHOW &&
		isEnabledScroll == false)
	{
		_OBItemListIndex = 0;
		_OBItemsScrollBar->ChangeState(UIScrollBar::UI_NORMAL);
		_OBItemsScrollBar->ConfigureScrollInfo(0.0f, 1.0f, 0.0f);
	}
	else if (obtainSettings.ExtraItems.size() <= MAX_HELPERSETUP_OBITEMSHOW &&
		isEnabledScroll == true)
	{
		_OBItemListIndex = 0;
		_OBItemsScrollBar->ChangeState(UIScrollBar::UI_DISABLED);
		_OBItemsScrollBar->ConfigureScrollInfo(0.0f, 1.0f, 0.0f);
	}

	if (_OBItemsScrollBar->GetState() != UIScrollBar::UI_DISABLED)
	{
		mu_uint32 maxIndex = obtainSettings.ExtraItems.size() - MAX_HELPERSETUP_OBITEMSHOW;
		if (_OBItemListIndex > maxIndex)
		{
			if (keepScroll == true)
			{
				_OBItemsScrollBar->ConfigureScrollInfo(0.0f, 1.0f, (mu_float)_OBItemListIndex / (mu_float)maxIndex);
			}
			else
			{
				_OBItemListIndex = maxIndex;
				_OBItemsScrollBar->ConfigureScrollInfo(0.0f, 1.0f, 0.0f);
			}
		}
	}
}

void UIHelperSetup::ConfigureObtainList()
{
	UIBase *focused = _SceneManager->GetFocused();
	HELPER_OBTAININGSETTINGEX &obtainSettings = _InternalSetting.Obtaining;

	mu_uint32 maxIndex = obtainSettings.ExtraItems.size() > MAX_HELPERSETUP_OBITEMSHOW ? MAX_HELPERSETUP_OBITEMSHOW : obtainSettings.ExtraItems.size();
	for (mu_uint32 n = 0; n < maxIndex; ++n)
	{
		UIRadioButton *btn = _OBItemsListBtn[n];

		if (_OBItemSelected == _OBItemListIndex + n)
		{
			btn->ChangeState(focused == btn ? UIRadioButton::UI_PRESSED_OVER : UIRadioButton::UI_PRESSED);
		}
		else
		{
			btn->ChangeState(focused == btn ? UIRadioButton::UI_OVER : UIRadioButton::UI_NORMAL);
		}

		btn->SetStateData(UIRadioButton::UI_NORMAL, UI_STATE_DATA(USE_COLOR_STATE, EVector2(0.0f, 0.0f), EVector2(1.0f, 1.0f), MU::MakeARGB(0, 0, 0, 0)));
		btn->SetStateData(UIRadioButton::UI_OVER, UI_STATE_DATA(USE_COLOR_STATE, EVector2(0.0f, 0.0f), EVector2(1.0f, 1.0f), MU::MakeARGB(0, 51, 204, 150)));
		btn->SetStateData(UIRadioButton::UI_PRESSED, UI_STATE_DATA(USE_COLOR_STATE, EVector2(0.0f, 0.0f), EVector2(1.0f, 1.0f), MU::MakeARGB(0, 51, 204, 110)));
		btn->SetStateData(UIRadioButton::UI_PRESSED_OVER, UI_STATE_DATA(USE_COLOR_STATE, EVector2(0.0f, 0.0f), EVector2(1.0f, 1.0f), MU::MakeARGB(0, 51, 204, 150)));
	}
}

void UIHelperSetup::AddObtainItem(HELPER_ITEMSETTING &itemSetting)
{
	HELPER_OBTAININGSETTINGEX &obtainSettings = _InternalSetting.Obtaining;
	obtainSettings.ExtraItems.push_back(itemSetting);
	ConfigureObtainScroll(true);
	ConfigureObtainList();
}

void UIHelperSetup::ModifyObtainItem(mu_int32 itemIndex, HELPER_ITEMSETTING &itemSetting)
{
	HELPER_OBTAININGSETTINGEX &obtainSettings = _InternalSetting.Obtaining;
	obtainSettings.ExtraItems[itemIndex] = itemSetting;
	ConfigureObtainList();
}

void UIHelperSetup::RemoveObtainItem(mu_int32 itemIndex)
{
	HELPER_OBTAININGSETTINGEX &obtainSettings = _InternalSetting.Obtaining;

	if (_OBItemSelected == itemIndex)
	{
		if (obtainSettings.ExtraItems.size() - 1 == 0)
		{
			_OBItemSelected = -1;
		}
		else if (_OBItemSelected >= obtainSettings.ExtraItems.size() - 1)
		{
			_OBItemSelected -= 1;
		}
	}
	else if (_OBItemSelected > itemIndex)
	{
		--_OBItemSelected;
	}

	obtainSettings.ExtraItems.erase(obtainSettings.ExtraItems.begin() + itemIndex);

	if (obtainSettings.ExtraItems.size() <= MAX_HELPERSETUP_OBITEMSHOW)
	{
		_OBItemListIndex = 0;
	}
	else if (_OBItemListIndex + MAX_HELPERSETUP_OBITEMSHOW > obtainSettings.ExtraItems.size())
	{
		_OBItemListIndex = obtainSettings.ExtraItems.size() - MAX_HELPERSETUP_OBITEMSHOW;
	}

	ConfigureObtainScroll(true);
	ConfigureObtainList();
}

mu_uint32 UIHelperSetup::OnPreWindowMessage(const SDL_Event *event, mu_size *result)
{
	switch (_CurrentTab)
	{
	case TAB_OBTAINING:
		{
			UIBase *focusObject = _SceneManager->GetFocused();
			if (focusObject == this ||
				(focusObject != nullptr &&
					focusObject->_Parent == this))
			{
				mu_int32 mouseX = MU_INPUT->GetMouseX();
				mu_int32 mouseY = MU_INPUT->GetMouseY();

				mu_float backX = MU_TO_WINDOW(OBITEMSBOX_POSX, _AspectWidth);
				mu_float backWidth = MU_TO_WINDOW(OBITEMSBOX_WIDTH, _AspectWidth);

				if (mouseY >= _OBItemsScrollBar->_NativeY &&
					mouseY <= _OBItemsScrollBar->_NativeY + _OBItemsScrollBar->_Height &&
					mouseX >= backX &&
					mouseX <= backX + backWidth)
				{
					switch (event->type)
					{
					case SDL_MOUSEWHEEL:
						{
							if (_OBItemsScrollBar->GetState() != UIScrollBar::UI_DISABLED)
							{
								HELPER_OBTAININGSETTINGEX &obtainSettings = _InternalSetting.Obtaining;
								mu_uint32 maxIndex = obtainSettings.ExtraItems.size() <= MAX_HELPERSETUP_OBITEMSHOW ? 0 : obtainSettings.ExtraItems.size() - MAX_HELPERSETUP_OBITEMSHOW;
								mu_float mouseWheel = event->wheel.y;
								mu_float diffValue = mouseWheel * _OBItemsScrollBar->_DiffValue * -0.03f;
								_OBItemsScrollBar->ConfigureScrollInfo(_OBItemsScrollBar->_MinValue, _OBItemsScrollBar->_MaxValue, _OBItemsScrollBar->_CurrentValue + diffValue);

								mu_uint32 newIndex = (mu_uint32)(_OBItemsScrollBar->GetCurrentValue() * (mu_float)maxIndex);
								if (newIndex != _OBItemListIndex)
								{
									_OBItemListIndex = newIndex;
									ConfigureObtainList();
								}
							}
						}
						return GFX_MESSAGE_RETURN::GFX_MESSAGE_ACCEPT;
					}
				}
			}
		}
		break;
	}

	return GFX_MESSAGE_RETURN::GFX_MESSAGE_NONE;
}

mu_boolean UIHelperSetup::OnGFxMessage(mu_uint32 objectid, mu_uint32 message, mu_size message_data)
{
	if (objectid == GAMEUI::MESSAGE_HELPERSETUP_OBITEMS_SCROLLBAR)
	{
		switch (message)
		{
		case GFX_MESSAGE_TYPE::GFX_SLIDE:
			{
				HELPER_OBTAININGSETTINGEX &obtainSettings = _InternalSetting.Obtaining;
				mu_uint32 maxIndex = obtainSettings.ExtraItems.size() <= MAX_HELPERSETUP_OBITEMSHOW ? 0 : obtainSettings.ExtraItems.size() - MAX_HELPERSETUP_OBITEMSHOW;
				mu_uint32 newIndex = (mu_uint32)(_OBItemsScrollBar->GetCurrentValue() * (mu_float)maxIndex);

				if (newIndex != _OBItemListIndex)
				{
					_OBItemListIndex = newIndex;
					ConfigureObtainList();
				}
			}
			return true;
		}
	}

	return false;
}

void UIHelperSetup::Update(mu_uint64 CurrentTime)
{
	switch (_CurrentTab)
	{
	case TAB_HUNTING:
		{
			_HTReturnTimeEditBox->Update(CurrentTime);

			_HTActSkill1DelayEditBox->Update(CurrentTime);
			_HTActSkill2DelayEditBox->Update(CurrentTime);
		}
		break;

	case TAB_OBTAINING:
		{
		}
		break;
	}
}

void UIHelperSetup::Draw()
{
	DrawFrames();
	DrawButtons();
	DrawTexts();
}

void UIHelperSetup::PostDraw()
{
	PostDrawButtons();
}

void UIHelperSetup::DrawFrames()
{
	mu_uint8 heroClass = GetBaseClass(Hero->Class);

	_BackFrame->Draw();
	_TopFrame->Draw();
	_BottomFrame->Draw();
	_LeftFrame->Draw();
	_RightFrame->Draw();

	// Tab Frame
	{
		_DFBackground->SetPosition(DFBACK_POSX, DFBACK_POSY);
		_DFBackground->SetDimensions(DFBACK_WIDTH, DFBACK_HEIGHT);

		_DFBackground->Draw();
	}

	switch (_CurrentTab)
	{
	case TAB_HUNTING:
		{
			_HTDivs[0]->Draw();
			_HTDivs[1]->Draw();
			_HTDivs[2]->Draw();
			_HTDivs[3]->Draw();
		}
		break;

	case TAB_OBTAINING:
		{
			_OBDivs[0]->Draw();
			_OBDivs[1]->Draw();
			_OBDivs[2]->Draw();

			TGLAYOUT_RENDERBACK(OBItemsBox);
			TGLAYOUT_RENDERFRONT(OBItemsBox);
		}
		break;
	}

	// Tab Frame
	{
		_DFLeftFrame->SetPosition(DFLEFT_POSX, DFLEFT_POSY);
		_DFLeftFrame->SetDimensions(DFLEFT_WIDTH, DFLEFT_HEIGHT);
		_DFRightFrame->SetPosition(DFRIGHT_POSX, DFRIGHT_POSY);
		_DFRightFrame->SetDimensions(DFRIGHT_WIDTH, DFRIGHT_HEIGHT);
		_DFTopFrame->SetPosition(DFTOP_POSX, DFTOP_POSY);
		_DFTopFrame->SetDimensions(DFTOP_WIDTH, DFTOP_HEIGHT);
		_DFBottomFrame->SetPosition(DFBOTTOM_POSX, DFBOTTOM_POSY);
		_DFBottomFrame->SetDimensions(DFBOTTOM_WIDTH, DFBOTTOM_HEIGHT);

		_DFLeftFrame->Draw();
		_DFRightFrame->Draw();
		_DFTopFrame->Draw();
		_DFBottomFrame->Draw();
	}

	static MUTexture *numTextures[] =
	{
		&INTERFACES::Data[INTERFACES::CRYWOLF_RANK_0],
		&INTERFACES::Data[INTERFACES::CRYWOLF_RANK_1],
		&INTERFACES::Data[INTERFACES::CRYWOLF_RANK_2],
		&INTERFACES::Data[INTERFACES::CRYWOLF_RANK_3],
		&INTERFACES::Data[INTERFACES::CRYWOLF_RANK_4],
		&INTERFACES::Data[INTERFACES::CRYWOLF_RANK_5],
		&INTERFACES::Data[INTERFACES::CRYWOLF_RANK_6],
		&INTERFACES::Data[INTERFACES::CRYWOLF_RANK_7],
		&INTERFACES::Data[INTERFACES::CRYWOLF_RANK_8],
		&INTERFACES::Data[INTERFACES::CRYWOLF_RANK_9],
	};

	switch (_CurrentTab)
	{
	case TAB_HUNTING:
		{
			HELPER_HUNTINGSETTING &huntingSettings = _InternalSetting.Hunting;
			_HTRange->SetTexture(numTextures[huntingSettings.Range]);
			_HTRange->Draw();
			_HTRangePlusBtn->Draw();
			_HTRangeMinusBtn->Draw();

			_HTPotionCheckBox->Draw();
			_HTPotionSettingBtn->Draw();

			switch (heroClass)
			{
			case GAME::CLASS_ELF:
			case GAME::CLASS_SUMMONER:
				{
					_HTAutoHealCheckBox->Draw();
				}
				break;
			}

			switch (heroClass)
			{
			case GAME::CLASS_WIZARD:
			case GAME::CLASS_KNIGHT:
			case GAME::CLASS_ELF:
			case GAME::CLASS_DARK_LORD:
			case GAME::CLASS_SUMMONER:
				{
					_HTPartyCheckBox->Draw();
					_HTPartySettingBtn->Draw();
				}
				break;
			}

			_HTLongDistCheckBox->Draw();
			_HTReturnPosCheckBox->Draw();

			_HTRegularAttackCheckBox->Draw();
			_HTSkillsCloselyCheckBox->Draw();
			_HTReturnTimeBack->Draw();
			_HTReturnTimeEditBox->Draw();

			_HTSkillBtn[BUTTON_SKILLINDEX::BSI_BASIC]->Draw();
			_HTSkillIcon[BUTTON_SKILLINDEX::BSI_BASIC]->Draw();

			_HTSkillBtn[BUTTON_SKILLINDEX::BSI_ACT1]->Draw();
			_HTSkillIcon[BUTTON_SKILLINDEX::BSI_ACT1]->Draw();
			_HTActSkill1DelayCheckBox->Draw();
			_HTActSkill1DelayBack->Draw();
			_HTActSkill1DelayEditBox->Draw();
			_HTActSkill1ConCheckBox->Draw();
			_HTActSkill1ConSettingBtn->Draw();

			_HTSkillBtn[BUTTON_SKILLINDEX::BSI_ACT2]->Draw();
			_HTSkillIcon[BUTTON_SKILLINDEX::BSI_ACT2]->Draw();
			_HTActSkill2DelayCheckBox->Draw();
			_HTActSkill2DelayBack->Draw();
			_HTActSkill2DelayEditBox->Draw();
			_HTActSkill2ConCheckBox->Draw();
			_HTActSkill2ConSettingBtn->Draw();

			switch (heroClass)
			{
			case GAME::CLASS_KNIGHT:
				{
					_HTComboCheckBox->Draw();
				}
				break;
			}

			_HTBuffDurCheckBox->Draw();

			_HTSkillBtn[BUTTON_SKILLINDEX::BSI_BUFF1]->Draw();
			_HTSkillIcon[BUTTON_SKILLINDEX::BSI_BUFF1]->Draw();
			_HTSkillBtn[BUTTON_SKILLINDEX::BSI_BUFF2]->Draw();
			_HTSkillIcon[BUTTON_SKILLINDEX::BSI_BUFF2]->Draw();
			_HTSkillBtn[BUTTON_SKILLINDEX::BSI_BUFF3]->Draw();
			_HTSkillIcon[BUTTON_SKILLINDEX::BSI_BUFF3]->Draw();
		}
		break;

	case TAB_OBTAINING:
		{
			HELPER_OBTAININGSETTINGEX &obtainSettings = _InternalSetting.Obtaining;
			_OBRange->SetTexture(numTextures[obtainSettings.Range]);
			_OBRange->Draw();
			_OBRangePlusBtn->Draw();
			_OBRangeMinusBtn->Draw();

			_OBRepairCheckBox->Draw();
			_OBPickAllCheckBox->Draw();
			_OBPickSelCheckBox->Draw();
			_OBJewelCheckBox->Draw();
			_OBSetItemCheckBox->Draw();
			_OBZenCheckBox->Draw();
			_OBExcCheckBox->Draw();
			_OBExtraCheckBox->Draw();

			mu_uint32 maxIndex = obtainSettings.ExtraItems.size();
			if (maxIndex > MAX_HELPERSETUP_OBITEMSHOW) maxIndex = MAX_HELPERSETUP_OBITEMSHOW;
			for (mu_uint32 n = 0; n < maxIndex; ++n)
			{
				_OBItemsListBtn[n]->Draw();
			}

			_OBItemsScrollBar->Draw();

			_OBItemAddBtn->Draw();
			_OBItemModBtn->Draw();
			_OBItemDelBtn->Draw();
		}
		break;
	}
}

void UIHelperSetup::DrawButtons()
{
	_CloseButton->Draw();
	_ResetButton->Draw();
	_SaveButton->Draw();
	for (mu_uint32 n = 0; n < TAB_MAX; ++n)
	{
		_Tabs[n]->Draw();
	}
}

void UIHelperSetup::DrawTexts()
{
	mu_uint8 heroClass = GetBaseClass(Hero->Class);
	mu_float screenX = MU_RESOURCE->_640x480Rate[0];
	mu_float screenY = MU_RESOURCE->_640x480Rate[1];
	mu_uint32 textColor = MU::MakeARGB(255, 255, 255, 255);
	mu_uint32 bgColor = MU::MakeARGB(0, 0, 0, 0);

	FONT_BOLD->DrawStringC2D(TEXTINDEX::HELPERSETUP_TITLE,
		MU_TO_WINDOW(_ViewX + HELPERSETUP_WIDTH * 0.5f, screenX),
		MU_TO_WINDOW(_ViewY + 15.0f, screenY),
		1.0f,
		ETA_CENTER,
		ETA_CENTER,
		0.0f,
		textColor,
		bgColor,
		GlobalText[3536]);

	switch (_CurrentTab)
	{
	case TAB_HUNTING:
		{
			FONT_NORMAL->DrawStringC2D(TEXTINDEX::HELPERSETUP_HTRANGE_LABEL,
				MU_TO_WINDOW(DFLEFT_POSX + 5.0f, screenX),
				MU_TO_WINDOW(DFTOP_POSY + 5.0f, screenY),
				1.0f,
				ETA_LEFT,
				ETA_BOTTOM,
				0.0f,
				textColor,
				bgColor,
				GlobalText[3526]);

			FONT_NORMAL->DrawStringC2D(TEXTINDEX::HELPERSETUP_HTPOTION_LABEL,
				MU_TO_WINDOW(HTPOTION_LABEL_POSX, screenX),
				MU_TO_WINDOW(HTPOTION_LABEL_POSY, screenY),
				1.0f,
				ETA_LEFT,
				ETA_CENTER,
				0.0f,
				textColor,
				bgColor,
				GlobalText[3507]);

			switch (heroClass)
			{
			case GAME::CLASS_ELF:
				{
					FONT_NORMAL->DrawStringC2D(TEXTINDEX::HELPERSETUP_HTAUTOHEAL_LABEL,
						MU_TO_WINDOW(HTAUTOHEAL_LABEL_POSX, screenX),
						MU_TO_WINDOW(HTAUTOHEAL_LABEL_POSY, screenY),
						1.0f,
						ETA_LEFT,
						ETA_CENTER,
						0.0f,
						textColor,
						bgColor,
						GlobalText[3546]);
				}
				break;

			case GAME::CLASS_SUMMONER:
				{
					FONT_NORMAL->DrawStringC2D(TEXTINDEX::HELPERSETUP_HTAUTOHEAL_LABEL,
						MU_TO_WINDOW(HTAUTOHEAL_LABEL_POSX, screenX),
						MU_TO_WINDOW(HTAUTOHEAL_LABEL_POSY, screenY),
						1.0f,
						ETA_LEFT,
						ETA_CENTER,
						0.0f,
						textColor,
						bgColor,
						GlobalText[3517]);
				}
				break;
			}

			switch (heroClass)
			{
			case GAME::CLASS_WIZARD:
			case GAME::CLASS_KNIGHT:
			case GAME::CLASS_ELF:
			case GAME::CLASS_DARK_LORD:
			case GAME::CLASS_SUMMONER:
				{
					FONT_NORMAL->DrawStringC2D(TEXTINDEX::HELPERSETUP_HTPARTY_LABEL,
						MU_TO_WINDOW(HTPARTY_LABEL_POSX, screenX),
						MU_TO_WINDOW(HTPARTY_LABEL_POSY, screenY),
						1.0f,
						ETA_LEFT,
						ETA_CENTER,
						0.0f,
						textColor,
						bgColor,
						GlobalText[3515]);
				}
				break;
			}

			FONT_NORMAL->DrawStringC2D(TEXTINDEX::HELPERSETUP_HTREGULARATTACK_LABEL,
				MU_TO_WINDOW(HTREGULARATTACK_LABEL_POSX, screenX),
				MU_TO_WINDOW(HTREGULARATTACK_LABEL_POSY, screenY),
				1.0f,
				ETA_LEFT,
				ETA_CENTER,
				0.0f,
				textColor,
				bgColor,
				GlobalText[3490]);

			FONT_NORMAL->DrawStringC2D(TEXTINDEX::HELPERSETUP_HTSKILLSCLOSELY_LABEL,
				MU_TO_WINDOW(HTSKILLSCLOSELY_LABEL_POSX, screenX),
				MU_TO_WINDOW(HTSKILLSCLOSELY_LABEL_POSY, screenY),
				1.0f,
				ETA_LEFT,
				ETA_CENTER,
				0.0f,
				textColor,
				bgColor,
				GlobalText[3491]);

			FONT_NORMAL->DrawStringC2D(TEXTINDEX::HELPERSETUP_HTLONGDIST_LABEL,
				MU_TO_WINDOW(HTLONGDIST_LABEL_POSX, screenX),
				MU_TO_WINDOW(HTLONGDIST_LABEL_POSY, screenY),
				1.0f,
				ETA_LEFT,
				ETA_CENTER,
				0.0f,
				textColor,
				bgColor,
				GlobalText[3508]);

			FONT_NORMAL->DrawStringC2D(TEXTINDEX::HELPERSETUP_HTORIGPOS_LABEL,
				MU_TO_WINDOW(HTORIGPOS_LABEL_POSX, screenX),
				MU_TO_WINDOW(HTORIGPOS_LABEL_POSY, screenY),
				1.0f,
				ETA_LEFT,
				ETA_CENTER,
				0.0f,
				textColor,
				bgColor,
				GlobalText[3509]);

			FONT_NORMAL->DrawStringC2D(TEXTINDEX::HELPERSETUP_HTRETURNTIME_LABEL1,
				MU_TO_WINDOW(HTRETURNTIME_LABEL1_POSX, screenX),
				MU_TO_WINDOW(HTRETURNTIME_LABEL1_POSY, screenY),
				1.0f,
				ETA_RIGHT,
				ETA_CENTER,
				0.0f,
				textColor,
				bgColor,
				GlobalText[3527]);
			FONT_NORMAL->DrawStringC2D(TEXTINDEX::HELPERSETUP_HTRETURNTIME_LABEL2,
				MU_TO_WINDOW(HTRETURNTIME_LABEL2_POSX, screenX),
				MU_TO_WINDOW(HTRETURNTIME_LABEL2_POSY, screenY),
				1.0f,
				ETA_LEFT,
				ETA_CENTER,
				0.0f,
				textColor,
				bgColor,
				GlobalText[3528]);

			FONT_NORMAL->DrawStringC2D(TEXTINDEX::HELPERSETUP_HTBASICSKILL_LABEL,
				MU_TO_WINDOW(HTBASICSKILL_LABEL_POSX, screenX),
				MU_TO_WINDOW(HTBASICSKILL_LABEL_POSY, screenY),
				1.0f,
				ETA_LEFT,
				ETA_TOP,
				0.0f,
				textColor,
				bgColor,
				GlobalText[3529]);

			FONT_NORMAL->DrawStringC2D(TEXTINDEX::HELPERSETUP_HTACTSKILL1_LABEL,
				MU_TO_WINDOW(HTACTSKILL1_LABEL_POSX, screenX),
				MU_TO_WINDOW(HTACTSKILL1_LABEL_POSY, screenY),
				1.0f,
				ETA_LEFT,
				ETA_TOP,
				0.0f,
				textColor,
				bgColor,
				GlobalText[3530]);
			FONT_NORMAL->DrawStringC2D(TEXTINDEX::HELPERSETUP_HTACTSKILL1_DELAY_LABEL,
				MU_TO_WINDOW(HTACTSKILL1_DELAY_LABEL_POSX, screenX),
				MU_TO_WINDOW(HTACTSKILL1_DELAY_LABEL_POSY, screenY),
				1.0f,
				ETA_LEFT,
				ETA_CENTER,
				0.0f,
				textColor,
				bgColor,
				GlobalText[3510]);
			FONT_NORMAL->DrawStringC2D(TEXTINDEX::HELPERSETUP_HTACTSKILL1_DELAYTIME_LABEL,
				MU_TO_WINDOW(HTACTSKILL1_DELAYTIME_LABEL_POSX, screenX),
				MU_TO_WINDOW(HTACTSKILL1_DELAYTIME_LABEL_POSY, screenY),
				1.0f,
				ETA_LEFT,
				ETA_CENTER,
				0.0f,
				textColor,
				bgColor,
				GlobalText[3528]);
			FONT_NORMAL->DrawStringC2D(TEXTINDEX::HELPERSETUP_HTACTSKILL1_CON_LABEL,
				MU_TO_WINDOW(HTACTSKILL1_CON_LABEL_POSX, screenX),
				MU_TO_WINDOW(HTACTSKILL1_CON_LABEL_POSY, screenY),
				1.0f,
				ETA_LEFT,
				ETA_CENTER,
				0.0f,
				textColor,
				bgColor,
				GlobalText[3511]);

			FONT_NORMAL->DrawStringC2D(TEXTINDEX::HELPERSETUP_HTACTSKILL2_LABEL,
				MU_TO_WINDOW(HTACTSKILL2_LABEL_POSX, screenX),
				MU_TO_WINDOW(HTACTSKILL2_LABEL_POSY, screenY),
				1.0f,
				ETA_LEFT,
				ETA_TOP,
				0.0f,
				textColor,
				bgColor,
				GlobalText[3531]);
			FONT_NORMAL->DrawStringC2D(TEXTINDEX::HELPERSETUP_HTACTSKILL2_DELAY_LABEL,
				MU_TO_WINDOW(HTACTSKILL2_DELAY_LABEL_POSX, screenX),
				MU_TO_WINDOW(HTACTSKILL2_DELAY_LABEL_POSY, screenY),
				1.0f,
				ETA_LEFT,
				ETA_CENTER,
				0.0f,
				textColor,
				bgColor,
				GlobalText[3510]);
			FONT_NORMAL->DrawStringC2D(TEXTINDEX::HELPERSETUP_HTACTSKILL2_DELAYTIME_LABEL,
				MU_TO_WINDOW(HTACTSKILL2_DELAYTIME_LABEL_POSX, screenX),
				MU_TO_WINDOW(HTACTSKILL2_DELAYTIME_LABEL_POSY, screenY),
				1.0f,
				ETA_LEFT,
				ETA_CENTER,
				0.0f,
				textColor,
				bgColor,
				GlobalText[3528]);
			FONT_NORMAL->DrawStringC2D(TEXTINDEX::HELPERSETUP_HTACTSKILL2_CON_LABEL,
				MU_TO_WINDOW(HTACTSKILL2_CON_LABEL_POSX, screenX),
				MU_TO_WINDOW(HTACTSKILL2_CON_LABEL_POSY, screenY),
				1.0f,
				ETA_LEFT,
				ETA_CENTER,
				0.0f,
				textColor,
				bgColor,
				GlobalText[3511]);

			switch (heroClass)
			{
			case GAME::CLASS_KNIGHT:
				{
					FONT_NORMAL->DrawStringC2D(TEXTINDEX::HELPERSETUP_HTCOMBO_LABEL,
						MU_TO_WINDOW(HTCOMBO_LABEL_POSX, screenX),
						MU_TO_WINDOW(HTCOMBO_LABEL_POSY, screenY),
						1.0f,
						ETA_LEFT,
						ETA_CENTER,
						0.0f,
						textColor,
						bgColor,
						GlobalText[3512]);
				}
				break;
			}

			FONT_NORMAL->DrawStringC2D(TEXTINDEX::HELPERSETUP_HTBUFFDUR_LABEL,
				MU_TO_WINDOW(HTBUFFDUR_LABEL_POSX, screenX),
				MU_TO_WINDOW(HTBUFFDUR_LABEL_POSY, screenY),
				1.0f,
				ETA_LEFT,
				ETA_CENTER,
				0.0f,
				textColor,
				bgColor,
				GlobalText[3513]);
		}
		break;

	case TAB_OBTAINING:
		{
			HELPER_OBTAININGSETTINGEX &obtainSettings = _InternalSetting.Obtaining;

			FONT_NORMAL->DrawStringC2D(TEXTINDEX::HELPERSETUP_HTRANGE_LABEL,
				MU_TO_WINDOW(DFLEFT_POSX + 5.0f, screenX),
				MU_TO_WINDOW(DFTOP_POSY + 5.0f, screenY),
				1.0f,
				ETA_LEFT,
				ETA_BOTTOM,
				0.0f,
				textColor,
				bgColor,
				GlobalText[3526]);

			FONT_NORMAL->DrawStringC2D(TEXTINDEX::HELPERSETUP_OBREPAIR_LABEL,
				MU_TO_WINDOW(OBREPAIR_LABEL_POSX, screenX),
				MU_TO_WINDOW(OBREPAIR_LABEL_POSY, screenY),
				1.0f,
				ETA_LEFT,
				ETA_CENTER,
				0.0f,
				textColor,
				bgColor,
				GlobalText[3518]);

			FONT_NORMAL->DrawStringC2D(TEXTINDEX::HELPERSETUP_OBPICKALL_LABEL,
				MU_TO_WINDOW(OBPICKALL_LABEL_POSX, screenX),
				MU_TO_WINDOW(OBPICKALL_LABEL_POSY, screenY),
				1.0f,
				ETA_LEFT,
				ETA_CENTER,
				0.0f,
				textColor,
				bgColor,
				GlobalText[3519]);

			FONT_NORMAL->DrawStringC2D(TEXTINDEX::HELPERSETUP_OBPICKSEL_LABEL,
				MU_TO_WINDOW(OBPICKSEL_LABEL_POSX, screenX),
				MU_TO_WINDOW(OBPICKSEL_LABEL_POSY, screenY),
				1.0f,
				ETA_LEFT,
				ETA_CENTER,
				0.0f,
				textColor,
				bgColor,
				GlobalText[3520]);

			FONT_NORMAL->DrawStringC2D(TEXTINDEX::HELPERSETUP_OBJEWEL_LABEL,
				MU_TO_WINDOW(OBJEWEL_LABEL_POSX, screenX),
				MU_TO_WINDOW(OBJEWEL_LABEL_POSY, screenY),
				1.0f,
				ETA_LEFT,
				ETA_CENTER,
				0.0f,
				textColor,
				bgColor,
				GlobalText[3521]);

			FONT_NORMAL->DrawStringC2D(TEXTINDEX::HELPERSETUP_OBSETITEM_LABEL,
				MU_TO_WINDOW(OBSETITEM_LABEL_POSX, screenX),
				MU_TO_WINDOW(OBSETITEM_LABEL_POSY, screenY),
				1.0f,
				ETA_LEFT,
				ETA_CENTER,
				0.0f,
				textColor,
				bgColor,
				GlobalText[3522]);

			FONT_NORMAL->DrawStringC2D(TEXTINDEX::HELPERSETUP_OBZEN_LABEL,
				MU_TO_WINDOW(OBZEN_LABEL_POSX, screenX),
				MU_TO_WINDOW(OBZEN_LABEL_POSY, screenY),
				1.0f,
				ETA_LEFT,
				ETA_CENTER,
				0.0f,
				textColor,
				bgColor,
				GlobalText[3523]);

			FONT_NORMAL->DrawStringC2D(TEXTINDEX::HELPERSETUP_OBEXC_LABEL,
				MU_TO_WINDOW(OBEXC_LABEL_POSX, screenX),
				MU_TO_WINDOW(OBEXC_LABEL_POSY, screenY),
				1.0f,
				ETA_LEFT,
				ETA_CENTER,
				0.0f,
				textColor,
				bgColor,
				GlobalText[3524]);

			FONT_NORMAL->DrawStringC2D(TEXTINDEX::HELPERSETUP_OBEXTRA_LABEL,
				MU_TO_WINDOW(OBEXTRA_LABEL_POSX, screenX),
				MU_TO_WINDOW(OBEXTRA_LABEL_POSY, screenY),
				1.0f,
				ETA_LEFT,
				ETA_CENTER,
				0.0f,
				textColor,
				bgColor,
				GlobalText[3525]);

			UIBase *focused = _SceneManager->GetFocused();
			mu_uint32 maxIndex = obtainSettings.ExtraItems.size();
			if (maxIndex > MAX_HELPERSETUP_OBITEMSHOW) maxIndex = MAX_HELPERSETUP_OBITEMSHOW;
			auto it = obtainSettings.ExtraItems.begin();
			for (mu_uint32 n = _OBItemListIndex; n--; ++it);
			for (mu_uint32 n = 0; n < maxIndex; ++n, ++it)
			{
				HELPER_ITEMSETTING &data = *it;

				mu_boolean isSelected = (n + _OBItemListIndex) == _OBItemSelected || _OBItemsListBtn[n] == focused;
				mu_uint32 resColor = isSelected == true ? MU::MakeARGB(255, 255, 255, 255) : MU::MakeARGB(200, 200, 200, 255);

#define BOOLTOSTR(x) (x == false ? _T("N") : _T("Y"))

				mu_text nameBuffer[512], textBuffer[512];
				GetItemName(data.ItemIndex, data.ItemLevel < 0 ? 0 : data.ItemLevel, nameBuffer, mu_countof(nameBuffer));
				mu_sprintf_s(textBuffer, mu_countof(textBuffer), GlobalText[15200],
					nameBuffer,
					data.MinLevel,
					BOOLTOSTR(data.IsLuck),
					BOOLTOSTR(data.IsSkill),
					BOOLTOSTR(data.IsOption),
					BOOLTOSTR(data.IsExcellent),
					BOOLTOSTR(data.IsSetItem),
					BOOLTOSTR(data.IsSocket));

				FONT_NORMAL->DrawStringC2D(TEXTINDEX::HELPERITEMADD_TYPENAME_BEGIN + n,
					MU_TO_WINDOW(OBITEMLIST_POSX + 1.0f, screenX),
					MU_TO_WINDOW(OBITEMLIST_POSY(n) + OBITEMLIST_HEIGHT * 0.5f - 1.0f, screenY),
					1.0f,
					ETA_LEFT,
					ETA_CENTER,
					0.0f,
					resColor,
					bgColor,
					textBuffer);
			}
		}
		break;
	}
}

void UIHelperSetup::PostDrawButtons()
{
	_CloseButton->PostDraw();
}

UIBase *UIHelperSetup::GetFocus(mu_int32 mouseX, mu_int32 mouseY)
{
	mu_uint8 heroClass = GetBaseClass(Hero->Class);
	UIBase *focus = UIBase::GetFocus(mouseX, mouseY);

	if (focus != nullptr)
	{
		UIBase *object = _CloseButton->GetFocus(mouseX, mouseY);

		if (object != nullptr)
		{
			return object;
		}

		object = _XButton->GetFocus(mouseX, mouseY);

		if (object != nullptr)
		{
			return object;
		}

		object = _ResetButton->GetFocus(mouseX, mouseY);

		if (object != nullptr)
		{
			return object;
		}

		object = _SaveButton->GetFocus(mouseX, mouseY);

		if (object != nullptr)
		{
			return object;
		}

		object = _Tabs[_CurrentTab]->GetFocus(mouseX, mouseY);

		if (object != nullptr)
		{
			return object;
		}

		for (mu_uint32 n = 0; n < TAB_MAX; ++n)
		{
			if (n == _CurrentTab) continue;
			object = _Tabs[n]->GetFocus(mouseX, mouseY);

			if (object != nullptr)
			{
				return object;
			}
		}

		switch (_CurrentTab)
		{
		case TAB_HUNTING:
			{
				object = _HTRangePlusBtn->GetFocus(mouseX, mouseY);

				if (object != nullptr)
				{
					return object;
				}

				object = _HTRangeMinusBtn->GetFocus(mouseX, mouseY);

				if (object != nullptr)
				{
					return object;
				}

				object = _HTPotionCheckBox->GetFocus(mouseX, mouseY);

				if (object != nullptr)
				{
					return object;
				}

				object = _HTPotionSettingBtn->GetFocus(mouseX, mouseY);

				if (object != nullptr)
				{
					return object;
				}

				switch (heroClass)
				{
				case GAME::CLASS_ELF:
				case GAME::CLASS_SUMMONER:
					{
						object = _HTAutoHealCheckBox->GetFocus(mouseX, mouseY);

						if (object != nullptr)
						{
							return object;
						}
					}
					break;
				}

				switch (heroClass)
				{
				case GAME::CLASS_WIZARD:
				case GAME::CLASS_KNIGHT:
				case GAME::CLASS_ELF:
				case GAME::CLASS_DARK_LORD:
				case GAME::CLASS_SUMMONER:
					{
						object = _HTPartyCheckBox->GetFocus(mouseX, mouseY);

						if (object != nullptr)
						{
							return object;
						}

						object = _HTPartySettingBtn->GetFocus(mouseX, mouseY);

						if (object != nullptr)
						{
							return object;
						}
					}
					break;
				}

				object = _HTRegularAttackCheckBox->GetFocus(mouseX, mouseY);

				if (object != nullptr)
				{
					return object;
				}

				object = _HTSkillsCloselyCheckBox->GetFocus(mouseX, mouseY);

				if (object != nullptr)
				{
					return object;
				}

				object = _HTLongDistCheckBox->GetFocus(mouseX, mouseY);

				if (object != nullptr)
				{
					return object;
				}

				object = _HTReturnPosCheckBox->GetFocus(mouseX, mouseY);

				if (object != nullptr)
				{
					return object;
				}

				object = _HTReturnTimeEditBox->GetFocus(mouseX, mouseY);

				if (object != nullptr)
				{
					return object;
				}

				object = _HTSkillBtn[BUTTON_SKILLINDEX::BSI_BASIC]->GetFocus(mouseX, mouseY);

				if (object != nullptr)
				{
					return object;
				}

				object = _HTSkillBtn[BUTTON_SKILLINDEX::BSI_ACT1]->GetFocus(mouseX, mouseY);

				if (object != nullptr)
				{
					return object;
				}
				object = _HTActSkill1DelayCheckBox->GetFocus(mouseX, mouseY);

				if (object != nullptr)
				{
					return object;
				}
				object = _HTActSkill1DelayEditBox->GetFocus(mouseX, mouseY);

				if (object != nullptr)
				{
					return object;
				}
				object = _HTActSkill1ConCheckBox->GetFocus(mouseX, mouseY);

				if (object != nullptr)
				{
					return object;
				}
				object = _HTActSkill1ConSettingBtn->GetFocus(mouseX, mouseY);

				if (object != nullptr)
				{
					return object;
				}

				object = _HTSkillBtn[BUTTON_SKILLINDEX::BSI_ACT2]->GetFocus(mouseX, mouseY);

				if (object != nullptr)
				{
					return object;
				}
				object = _HTActSkill2DelayCheckBox->GetFocus(mouseX, mouseY);

				if (object != nullptr)
				{
					return object;
				}
				object = _HTActSkill2DelayEditBox->GetFocus(mouseX, mouseY);

				if (object != nullptr)
				{
					return object;
				}
				object = _HTActSkill2ConCheckBox->GetFocus(mouseX, mouseY);

				if (object != nullptr)
				{
					return object;
				}
				object = _HTActSkill2ConSettingBtn->GetFocus(mouseX, mouseY);

				if (object != nullptr)
				{
					return object;
				}

				switch (heroClass)
				{
				case GAME::CLASS_KNIGHT:
					{
						object = _HTComboCheckBox->GetFocus(mouseX, mouseY);

						if (object != nullptr)
						{
							return object;
						}
					}
					break;
				}

				object = _HTBuffDurCheckBox->GetFocus(mouseX, mouseY);

				if (object != nullptr)
				{
					return object;
				}

				object = _HTSkillBtn[BUTTON_SKILLINDEX::BSI_BUFF1]->GetFocus(mouseX, mouseY);

				if (object != nullptr)
				{
					return object;
				}
				object = _HTSkillBtn[BUTTON_SKILLINDEX::BSI_BUFF2]->GetFocus(mouseX, mouseY);

				if (object != nullptr)
				{
					return object;
				}
				object = _HTSkillBtn[BUTTON_SKILLINDEX::BSI_BUFF3]->GetFocus(mouseX, mouseY);

				if (object != nullptr)
				{
					return object;
				}
			}
			break;

		case TAB_OBTAINING:
			{
				object = _OBRangePlusBtn->GetFocus(mouseX, mouseY);

				if (object != nullptr)
				{
					return object;
				}

				object = _OBRangeMinusBtn->GetFocus(mouseX, mouseY);

				if (object != nullptr)
				{
					return object;
				}

				object = _OBRepairCheckBox->GetFocus(mouseX, mouseY);

				if (object != nullptr)
				{
					return object;
				}

				object = _OBPickAllCheckBox->GetFocus(mouseX, mouseY);

				if (object != nullptr)
				{
					return object;
				}

				object = _OBPickSelCheckBox->GetFocus(mouseX, mouseY);

				if (object != nullptr)
				{
					return object;
				}

				object = _OBJewelCheckBox->GetFocus(mouseX, mouseY);

				if (object != nullptr)
				{
					return object;
				}

				object = _OBSetItemCheckBox->GetFocus(mouseX, mouseY);

				if (object != nullptr)
				{
					return object;
				}

				object = _OBZenCheckBox->GetFocus(mouseX, mouseY);

				if (object != nullptr)
				{
					return object;
				}

				object = _OBExcCheckBox->GetFocus(mouseX, mouseY);

				if (object != nullptr)
				{
					return object;
				}

				object = _OBExtraCheckBox->GetFocus(mouseX, mouseY);

				if (object != nullptr)
				{
					return object;
				}

				object = _OBItemsScrollBar->GetFocus(mouseX, mouseY);

				if (object != nullptr)
				{
					return object;
				}

				HELPER_OBTAININGSETTINGEX &obtainSettings = _InternalSetting.Obtaining;
				mu_uint32 maxIndex = obtainSettings.ExtraItems.size();
				if (maxIndex > MAX_HELPERSETUP_OBITEMSHOW) maxIndex = MAX_HELPERSETUP_OBITEMSHOW;
				for (mu_uint32 n = 0; n < maxIndex; ++n)
				{
					object = _OBItemsListBtn[n]->GetFocus(mouseX, mouseY);

					if (object != nullptr)
					{
						return object;
					}
				}

				object = _OBItemAddBtn->GetFocus(mouseX, mouseY);

				if (object != nullptr)
				{
					return object;
				}

				object = _OBItemModBtn->GetFocus(mouseX, mouseY);

				if (object != nullptr)
				{
					return object;
				}

				object = _OBItemDelBtn->GetFocus(mouseX, mouseY);

				if (object != nullptr)
				{
					return object;
				}
			}
			break;
		}
	}

	return focus;
}

void UIHelperSetup::SetCurrentTab(mu_uint32 tab)
{
	_CurrentTab = tab;

	UIBase *focus = _SceneManager->GetFocused();
	
	for (mu_uint32 n = 0; n < TAB_MAX; ++n)
	{
		if (n == tab)
		{
			if (_Tabs[n] == focus)
			{
				_Tabs[n]->ChangeState(UIRadioButton::UI_PRESSED_OVER);
			}
			else
			{
				_Tabs[n]->ChangeState(UIRadioButton::UI_PRESSED);
			}
		}
		else
		{
			if (_Tabs[n] == focus)
			{
				_Tabs[n]->ChangeState(UIRadioButton::UI_OVER);
			}
			else
			{
				_Tabs[n]->ChangeState(UIRadioButton::UI_NORMAL);
			}
		}
	}
}

void UIHelperSetup::Configure(HELPER_SETTING &helperSetting)
{
	_InternalSetting = helperSetting;

	// Hunting Tab
	HELPER_HUNTINGSETTING &huntingSetting = _InternalSetting.Hunting;

	HELPER_POTIONSETTING &potionSetting = huntingSetting.PotionSetting;
	_HTPotionCheckBox->ChangeState(potionSetting.EnablePotion == true ? UIToggleButton::UI_PRESSED : UIToggleButton::UI_NORMAL);
	_HTAutoHealCheckBox->ChangeState(potionSetting.EnableAutoHeal == true ? UIToggleButton::UI_PRESSED : UIToggleButton::UI_NORMAL);

	HELPER_PARTYSETTING &partySetting = huntingSetting.PartySetting;
	_HTPartyCheckBox->ChangeState(partySetting.EnableParty == true ? UIToggleButton::UI_PRESSED : UIToggleButton::UI_NORMAL);

	_HTRegularAttackCheckBox->ChangeState(huntingSetting.EnableRegularAttack == true ? UIToggleButton::UI_PRESSED : UIToggleButton::UI_NORMAL);
	_HTSkillsCloselyCheckBox->ChangeState(huntingSetting.EnableSkillsClosely == true ? UIToggleButton::UI_PRESSED : UIToggleButton::UI_NORMAL);
	_HTLongDistCheckBox->ChangeState(huntingSetting.EnableLongDistCounterAttack == true ? UIToggleButton::UI_PRESSED : UIToggleButton::UI_NORMAL);
	_HTReturnPosCheckBox->ChangeState(huntingSetting.EnableReturnPosition == true ? UIToggleButton::UI_PRESSED : UIToggleButton::UI_NORMAL);

	mu_text textBuffer[512];
	mu_sprintf_s(textBuffer, mu_countof(textBuffer), _T("%u"), huntingSetting.ReturnPositionTime);
	_HTReturnTimeEditBox->SetText(textBuffer);

	_HTComboCheckBox->ChangeState(UIToggleButton::UI_DISABLED);

	HELPER_SKILLSETTING &basicSkill = huntingSetting.Skills[BUTTON_SKILLINDEX::BSI_BASIC];
	if (basicSkill.SkillIndex == -1)
	{
		_HTSkillIcon[BUTTON_SKILLINDEX::BSI_BASIC]->MarkGfxFlag(GFX_FLAG::GFX_HIDDEN);
	}
	else
	{
		ConfigureSkill(_HTSkillIcon[BUTTON_SKILLINDEX::BSI_BASIC], basicSkill.SkillIndex);
		_HTSkillIcon[BUTTON_SKILLINDEX::BSI_BASIC]->UnmarkGfxFlag(GFX_FLAG::GFX_HIDDEN);
	}

	HELPER_SKILLSETTING &act1Skill = huntingSetting.Skills[BUTTON_SKILLINDEX::BSI_ACT1];
	if (act1Skill.SkillIndex == -1)
	{
		_HTSkillIcon[BUTTON_SKILLINDEX::BSI_ACT1]->MarkGfxFlag(GFX_FLAG::GFX_HIDDEN);
	}
	else
	{
		ConfigureSkill(_HTSkillIcon[BUTTON_SKILLINDEX::BSI_ACT1], act1Skill.SkillIndex);
		_HTSkillIcon[BUTTON_SKILLINDEX::BSI_ACT1]->UnmarkGfxFlag(GFX_FLAG::GFX_HIDDEN);
	}
	_HTActSkill1ConCheckBox->ChangeState(act1Skill.EnableCon == true ? UIToggleButton::UI_PRESSED : UIToggleButton::UI_NORMAL);
	_HTActSkill1DelayCheckBox->ChangeState(act1Skill.EnableDelay == true ? UIToggleButton::UI_PRESSED : UIToggleButton::UI_NORMAL);
	mu_sprintf_s(textBuffer, mu_countof(textBuffer), _T("%u"), act1Skill.DelayTime);
	_HTActSkill1DelayEditBox->SetText(textBuffer);

	HELPER_SKILLSETTING &act2Skill = huntingSetting.Skills[BUTTON_SKILLINDEX::BSI_ACT2];
	if (act2Skill.SkillIndex == -1)
	{
		_HTSkillIcon[BUTTON_SKILLINDEX::BSI_ACT2]->MarkGfxFlag(GFX_FLAG::GFX_HIDDEN);
	}
	else
	{
		ConfigureSkill(_HTSkillIcon[BUTTON_SKILLINDEX::BSI_ACT2], act2Skill.SkillIndex);
		_HTSkillIcon[BUTTON_SKILLINDEX::BSI_ACT2]->UnmarkGfxFlag(GFX_FLAG::GFX_HIDDEN);
	}
	_HTActSkill2ConCheckBox->ChangeState(act2Skill.EnableCon == true ? UIToggleButton::UI_PRESSED : UIToggleButton::UI_NORMAL);
	_HTActSkill2DelayCheckBox->ChangeState(act2Skill.EnableDelay == true ? UIToggleButton::UI_PRESSED : UIToggleButton::UI_NORMAL);
	mu_sprintf_s(textBuffer, mu_countof(textBuffer), _T("%u"), act2Skill.DelayTime);
	_HTActSkill2DelayEditBox->SetText(textBuffer);

	_HTBuffDurCheckBox->ChangeState(huntingSetting.EnableBuffs == true ? UIToggleButton::UI_PRESSED : UIToggleButton::UI_NORMAL);

	for (mu_uint32 n = BUTTON_SKILLINDEX::BSI_BUFF1; n <= BUTTON_SKILLINDEX::BSI_BUFF3; ++n)
	{
		HELPER_SKILLSETTING &buffSkill = huntingSetting.Skills[n];
		if (buffSkill.SkillIndex == -1)
		{
			_HTSkillIcon[n]->MarkGfxFlag(GFX_FLAG::GFX_HIDDEN);
		}
		else
		{
			ConfigureSkill(_HTSkillIcon[n], buffSkill.SkillIndex);
			_HTSkillIcon[n]->UnmarkGfxFlag(GFX_FLAG::GFX_HIDDEN);
		}
	}

	// Obtaining Tab
	HELPER_OBTAININGSETTINGEX &obtainingSetting = _InternalSetting.Obtaining;

	_OBRepairCheckBox->ChangeState(obtainingSetting.EnableRepair == true ? UIToggleButton::UI_PRESSED : UIToggleButton::UI_NORMAL);
	_OBPickAllCheckBox->ChangeState(obtainingSetting.EnablePickAll == true ? UIToggleButton::UI_PRESSED : UIToggleButton::UI_NORMAL);
	_OBPickSelCheckBox->ChangeState(obtainingSetting.EnablePick == true ? UIToggleButton::UI_PRESSED : UIToggleButton::UI_NORMAL);
	_OBJewelCheckBox->ChangeState(obtainingSetting.PickJewels == true ? UIToggleButton::UI_PRESSED : UIToggleButton::UI_NORMAL);
	_OBSetItemCheckBox->ChangeState(obtainingSetting.PickSetItems == true ? UIToggleButton::UI_PRESSED : UIToggleButton::UI_NORMAL);
	_OBZenCheckBox->ChangeState(obtainingSetting.PickZen == true ? UIToggleButton::UI_PRESSED : UIToggleButton::UI_NORMAL);
	_OBExcCheckBox->ChangeState(obtainingSetting.PickExcellent == true ? UIToggleButton::UI_PRESSED : UIToggleButton::UI_NORMAL);
	_OBExtraCheckBox->ChangeState(obtainingSetting.PickExtra == true ? UIToggleButton::UI_PRESSED : UIToggleButton::UI_NORMAL);

	ConfigureObtainScroll();
	ConfigureObtainList();
}

void UIHelperSetup::PrepareSetting()
{
	HELPER_SETTING &setting = _InternalSetting;

	// Hunting Tab
	HELPER_HUNTINGSETTING &huntingSetting = setting.Hunting;
	huntingSetting.EnableRegularAttack = _HTRegularAttackCheckBox->GetState() >= UIToggleButton::UI_PRESSED;
	huntingSetting.EnableSkillsClosely = _HTSkillsCloselyCheckBox->GetState() >= UIToggleButton::UI_PRESSED;
	huntingSetting.EnableLongDistCounterAttack = _HTLongDistCheckBox->GetState() >= UIToggleButton::UI_PRESSED;
	huntingSetting.EnableReturnPosition = _HTReturnPosCheckBox->GetState() >= UIToggleButton::UI_PRESSED;
	mu_text textBuffer[512];
	_HTReturnTimeEditBox->GetText(textBuffer, mu_countof(textBuffer));
	huntingSetting.ReturnPositionTime = boost::lexical_cast<mu_uint16>(textBuffer);
	huntingSetting.EnableBuffs = _HTBuffDurCheckBox->GetState() >= UIToggleButton::UI_PRESSED;
	// Potion Setting
	huntingSetting.PotionSetting.EnablePotion = _HTPotionCheckBox->GetState() >= UIToggleButton::UI_PRESSED;
	huntingSetting.PotionSetting.EnableAutoHeal = _HTAutoHealCheckBox->GetState() >= UIToggleButton::UI_PRESSED;
	// Party Setting
	huntingSetting.PartySetting.EnableParty = _HTPartyCheckBox->GetState() >= UIToggleButton::UI_PRESSED;
	// Skills Setting
	huntingSetting.Skills[BUTTON_SKILLINDEX::BSI_ACT1].EnableCon = _HTActSkill1ConCheckBox->GetState() >= UIToggleButton::UI_PRESSED;
	huntingSetting.Skills[BUTTON_SKILLINDEX::BSI_ACT1].EnableDelay = _HTActSkill1DelayCheckBox->GetState() >= UIToggleButton::UI_PRESSED;
	_HTActSkill1DelayEditBox->GetText(textBuffer, mu_countof(textBuffer));
	huntingSetting.Skills[BUTTON_SKILLINDEX::BSI_ACT1].DelayTime = boost::lexical_cast<mu_uint16>(textBuffer);

	huntingSetting.Skills[BUTTON_SKILLINDEX::BSI_ACT2].EnableCon = _HTActSkill2ConCheckBox->GetState() >= UIToggleButton::UI_PRESSED;
	huntingSetting.Skills[BUTTON_SKILLINDEX::BSI_ACT2].EnableDelay = _HTActSkill2DelayCheckBox->GetState() >= UIToggleButton::UI_PRESSED;
	_HTActSkill2DelayEditBox->GetText(textBuffer, mu_countof(textBuffer));
	huntingSetting.Skills[BUTTON_SKILLINDEX::BSI_ACT2].DelayTime = boost::lexical_cast<mu_uint16>(textBuffer);

	// Obtaining Tab
	HELPER_OBTAININGSETTINGEX &obtainingSetting = setting.Obtaining;
	obtainingSetting.EnableRepair = _OBRepairCheckBox->GetState() >= UIToggleButton::UI_PRESSED;
	obtainingSetting.EnablePickAll = _OBPickAllCheckBox->GetState() >= UIToggleButton::UI_PRESSED;
	obtainingSetting.EnablePick = _OBPickSelCheckBox->GetState() >= UIToggleButton::UI_PRESSED;
	obtainingSetting.PickJewels = _OBJewelCheckBox->GetState() >= UIToggleButton::UI_PRESSED;
	obtainingSetting.PickSetItems = _OBSetItemCheckBox->GetState() >= UIToggleButton::UI_PRESSED;
	obtainingSetting.PickZen = _OBZenCheckBox->GetState() >= UIToggleButton::UI_PRESSED;
	obtainingSetting.PickExcellent = _OBExcCheckBox->GetState() >= UIToggleButton::UI_PRESSED;
	obtainingSetting.PickExtra = _OBExtraCheckBox->GetState() >= UIToggleButton::UI_PRESSED;
}