#ifndef __MU_UIHELPERS_MSGBOX_H__
#define __MU_UIHELPERS_MSGBOX_H__

#pragma once

#ifndef __GNUC__
#pragma region MessageBox Defines
#endif
#define TUV_MSGBOX_SCREENWIDTH (1024.0f)
#define TUV_MSGBOX_SCREENHEIGHT (768.0f)

#define TUV_MSGBOX_BACK_WIDTH (225.0f)
#define TUV_MSGBOX_BACK_HEIGHT (512.0f)
#define TUV_MSGBOX_TOP_WIDTH (230.0f)
#define TUV_MSGBOX_TOP_HEIGHT (67.0f)
#define TUV_MSGBOX_BOTTOM_WIDTH (230.0f)
#define TUV_MSGBOX_BOTTOM_HEIGHT (50.0f)
#define TUV_MSGBOX_MIDDLE_WIDTH (230.0f)
#define TUV_MSGBOX_MIDDLE_HEIGHT (15.0f)

#define TSIZE_MSGBOX_MINWIDTH (TUV_MSGBOX_TOP_WIDTH)
#define TSIZE_MSGBOX_MINHEIGHT (TUV_MSGBOX_TOP_HEIGHT + TUV_MSGBOX_BOTTOM_HEIGHT)

#define TPADDING_MSGBOX_BACK_LEFT (3.0f)
#define TPADDING_MSGBOX_BACK_TOP (5.0f)
#define TPADDING_MSGBOX_BACK_RIGHT (TPADDING_MSGBOX_BACK_LEFT + 8.0f)
#define TPADDING_MSGBOX_BACK_BOTTOM (TPADDING_MSGBOX_BACK_TOP + 8.0f)

#define TSIZE_MSGBOX_BACK_WIDTH(width) (width - TPADDING_MSGBOX_BACK_RIGHT)
#define TSIZE_MSGBOX_BACK_HEIGHT(height) (height - TPADDING_MSGBOX_BACK_BOTTOM)

#define TSIZE_MSGBOX_LEFTTOP_WIDTH (60.0f)
#define TSIZE_MSGBOX_RIGHTTOP_WIDTH (60.0f)
#define TSIZE_MSGBOX_MIDDLETOP_WIDTH(width) (width - TSIZE_MSGBOX_LEFTTOP_WIDTH - TSIZE_MSGBOX_RIGHTTOP_WIDTH)
#define TSIZE_MSGBOX_TOP_HEIGHT (67.0f)

#define TSIZE_MSGBOX_LEFTBOTTOM_WIDTH (60.0f)
#define TSIZE_MSGBOX_RIGHTBOTTOM_WIDTH (60.0f)
#define TSIZE_MSGBOX_MIDDLEBOTTOM_WIDTH(width) (width - TSIZE_MSGBOX_LEFTBOTTOM_WIDTH - TSIZE_MSGBOX_RIGHTBOTTOM_WIDTH)
#define TSIZE_MSGBOX_BOTTOM_HEIGHT (50.0f)

#define TSIZE_MSGBOX_LEFTMIDDLE_WIDTH (4.0f)
#define TSIZE_MSGBOX_RIGHTMIDDLE_WIDTH (9.0f)
#define TSIZE_MSGBOX_MIDDLE_HEIGHT(height) (height - TSIZE_MSGBOX_TOP_HEIGHT - TSIZE_MSGBOX_BOTTOM_HEIGHT)

#define TPADDING_MSGBOX_RIGHT (5.0f)
#define TPADDING_MSGBOX_BOTTOM (6.0f)
#define TPADDING_MSGBOX_GETLEFT(screenWidth) (TPADDING_MSGBOX_RIGHT * (TUV_MSGBOX_SCREENWIDTH / screenWidth))
#define TPADDING_MSGBOX_GETBOTTOM(screenHeight) (TPADDING_MSGBOX_BOTTOM * (TUV_MSGBOX_SCREENHEIGHT / screenHeight))

#define TTEXT_MSGBOX_PADDING_TOP (35.0f)
#define TTEXT_MSGBOX_MOVEUP(screenHeight) (TTEXT_MSGBOX_PADDING_TOP * (TUV_MSGBOX_SCREENHEIGHT / screenHeight))

#define TUV_MSGBOX_BACK_BEGIN (EVector2(0.0f, 0.0f))
#define TUV_MSGBOX_BACK_END(width, height) (EVector2(width / TUV_MSGBOX_BACK_WIDTH, height / TUV_MSGBOX_BACK_HEIGHT))
#define TUV_MSGBOX_LEFTTOP_BEGIN (EVector2(UV_PADDING_LEFT(TUV_MSGBOX_TOP_WIDTH, 0.0f), UV_PADDING_TOP(TUV_MSGBOX_TOP_HEIGHT, 0.0f)))
#define TUV_MSGBOX_LEFTTOP_END (EVector2(UV_PADDING_LEFT(TUV_MSGBOX_TOP_WIDTH, TSIZE_MSGBOX_LEFTTOP_WIDTH), UV_PADDING_BOTTOM(TUV_MSGBOX_TOP_HEIGHT, 0.0f)))
#define TUV_MSGBOX_RIGHTTOP_BEGIN (EVector2(UV_PADDING_RIGHT(TUV_MSGBOX_TOP_WIDTH, TSIZE_MSGBOX_LEFTTOP_WIDTH), UV_PADDING_TOP(TUV_MSGBOX_TOP_HEIGHT, 0.0f)))
#define TUV_MSGBOX_RIGHTTOP_END (EVector2(UV_PADDING_RIGHT(TUV_MSGBOX_TOP_WIDTH, 0.0f), UV_PADDING_BOTTOM(TUV_MSGBOX_TOP_HEIGHT, 0.0f)))
#define TUV_MSGBOX_MIDDLETOP_BEGIN (EVector2(UV_PADDING_LEFT(TUV_MSGBOX_TOP_WIDTH, TSIZE_MSGBOX_RIGHTTOP_WIDTH), UV_PADDING_TOP(TUV_MSGBOX_TOP_HEIGHT, 0.0f)))
#define TUV_MSGBOX_MIDDLETOP_END (EVector2(UV_PADDING_RIGHT(TUV_MSGBOX_TOP_WIDTH, TSIZE_MSGBOX_RIGHTTOP_WIDTH), UV_PADDING_BOTTOM(TUV_MSGBOX_TOP_HEIGHT, 0.0f)))

#define TUV_MSGBOX_LEFTBOTTOM_BEGIN (EVector2(UV_PADDING_LEFT(TUV_MSGBOX_BOTTOM_WIDTH, 0.0f), UV_PADDING_TOP(TUV_MSGBOX_BOTTOM_HEIGHT, 0.0f)))
#define TUV_MSGBOX_LEFTBOTTOM_END (EVector2(UV_PADDING_LEFT(TUV_MSGBOX_BOTTOM_WIDTH, TSIZE_MSGBOX_LEFTBOTTOM_WIDTH), UV_PADDING_BOTTOM(TUV_MSGBOX_BOTTOM_HEIGHT, 0.0f)))
#define TUV_MSGBOX_RIGHTBOTTOM_BEGIN (EVector2(UV_PADDING_RIGHT(TUV_MSGBOX_BOTTOM_WIDTH, TSIZE_MSGBOX_LEFTBOTTOM_WIDTH), UV_PADDING_TOP(TUV_MSGBOX_BOTTOM_HEIGHT, 0.0f)))
#define TUV_MSGBOX_RIGHTBOTTOM_END (EVector2(UV_PADDING_RIGHT(TUV_MSGBOX_BOTTOM_WIDTH, 0.0f), UV_PADDING_BOTTOM(TUV_MSGBOX_BOTTOM_HEIGHT, 0.0f)))
#define TUV_MSGBOX_MIDDLEBOTTOM_BEGIN (EVector2(UV_PADDING_LEFT(TUV_MSGBOX_BOTTOM_WIDTH, TSIZE_MSGBOX_RIGHTBOTTOM_WIDTH), UV_PADDING_TOP(TUV_MSGBOX_BOTTOM_HEIGHT, 0.0f)))
#define TUV_MSGBOX_MIDDLEBOTTOM_END (EVector2(UV_PADDING_RIGHT(TUV_MSGBOX_BOTTOM_WIDTH, TSIZE_MSGBOX_RIGHTBOTTOM_WIDTH), UV_PADDING_BOTTOM(TUV_MSGBOX_BOTTOM_HEIGHT, 0.0f)))

#define TUV_MSGBOX_MIDDLELEFT_BEGIN (EVector2(UV_PADDING_LEFT(TUV_MSGBOX_MIDDLE_WIDTH, 0.0f), UV_PADDING_TOP(TUV_MSGBOX_MIDDLE_HEIGHT, 0.0f)))
#define TUV_MSGBOX_MIDDLELEFT_END (EVector2(UV_PADDING_LEFT(TUV_MSGBOX_MIDDLE_WIDTH, TSIZE_MSGBOX_LEFTMIDDLE_WIDTH), UV_PADDING_BOTTOM(TUV_MSGBOX_MIDDLE_HEIGHT, 0.0f)))
#define TUV_MSGBOX_MIDDLERIGHT_BEGIN (EVector2(UV_PADDING_RIGHT(TUV_MSGBOX_MIDDLE_WIDTH, TSIZE_MSGBOX_RIGHTMIDDLE_WIDTH), UV_PADDING_TOP(TUV_MSGBOX_MIDDLE_HEIGHT, 0.0f)))
#define TUV_MSGBOX_MIDDLERIGHT_END (EVector2(UV_PADDING_RIGHT(TUV_MSGBOX_MIDDLE_WIDTH, 0.0f), UV_PADDING_BOTTOM(TUV_MSGBOX_MIDDLE_HEIGHT, 0.0f)))

#define TPOS_MSGBOX_BACK_X(x) (x + TPADDING_MSGBOX_BACK_LEFT)
#define TPOS_MSGBOX_BACK_Y(y) (y + TPADDING_MSGBOX_BACK_TOP)

#define TPOS_MSGBOX_LEFTTOP_X(x) (x)
#define TPOS_MSGBOX_RIGHTTOP_X(x, width) (x + (width - TSIZE_MSGBOX_RIGHTTOP_WIDTH))
#define TPOS_MSGBOX_MIDDLETOP_X(x) (x + TSIZE_MSGBOX_LEFTTOP_WIDTH)
#define TPOS_MSGBOX_TOP_Y(y) (y)

#define TPOS_MSGBOX_LEFTBOTTOM_X(x) (x)
#define TPOS_MSGBOX_RIGHTBOTTOM_X(x, width) (x + (width - TSIZE_MSGBOX_RIGHTBOTTOM_WIDTH))
#define TPOS_MSGBOX_MIDDLEBOTTOM_X(x) (x + TSIZE_MSGBOX_LEFTBOTTOM_WIDTH)
#define TPOS_MSGBOX_BOTTOM_Y(y, height) (y + height - TSIZE_MSGBOX_BOTTOM_HEIGHT)

#define TPOS_MSGBOX_LEFTMIDDLE_X(x) (x)
#define TPOS_MSGBOX_RIGHTMIDDLE_X(x, width) (x + width - TSIZE_MSGBOX_RIGHTMIDDLE_WIDTH)
#define TPOS_MSGBOX_MIDDLE_Y(y, height) (y + TSIZE_MSGBOX_TOP_HEIGHT)

#define TMSGBOX_VARS \
UISprite *_Int_MsgBox_Back; \
UISprite *_Int_MsgBox_TopLeft; \
UISprite *_Int_MsgBox_TopMiddle; \
UISprite *_Int_MsgBox_TopRight; \
UISprite *_Int_MsgBox_MiddleLeft; \
UISprite *_Int_MsgBox_MiddleRight; \
UISprite *_Int_MsgBox_BottomLeft; \
UISprite *_Int_MsgBox_BottomMiddle; \
UISprite *_Int_MsgBox_BottomRight;

#define TMSGBOX_PREPARE(manager, owner, screenWidth, screenHeight, x, y, width, height) \
{ \
mu_float int_aspectWidth = TUV_MSGBOX_SCREENWIDTH / screenWidth; \
mu_float int_aspectHeight = TUV_MSGBOX_SCREENHEIGHT / screenHeight; \
mu_float int_x = MU_TO_WINDOW(x, int_aspectWidth); \
mu_float int_y = MU_TO_WINDOW(y, int_aspectHeight); \
mu_float int_width = MU_TO_WINDOW(width, int_aspectWidth); \
mu_float int_height = MU_TO_WINDOW(height, int_aspectHeight); \
_Int_MsgBox_Back = new UISprite(manager, owner, &INTERFACES::Data[INTERFACES::MSGBOX_BACK], TUV_MSGBOX_SCREENWIDTH, TUV_MSGBOX_SCREENHEIGHT, TPOS_MSGBOX_BACK_X(int_x), TPOS_MSGBOX_BACK_Y(int_y), TSIZE_MSGBOX_BACK_WIDTH(int_width), TSIZE_MSGBOX_BACK_HEIGHT(int_height), TUV_MSGBOX_BACK_BEGIN, TUV_MSGBOX_BACK_END(int_width, int_height)); \
_Int_MsgBox_Back->SetSampler(ESampler::eUrVrWrMinLMagLMipL_Anisotropy); \
_Int_MsgBox_TopLeft = new UISprite(manager, owner, &INTERFACES::Data[INTERFACES::MSGBOX_TOP], TUV_MSGBOX_SCREENWIDTH, TUV_MSGBOX_SCREENHEIGHT, TPOS_MSGBOX_LEFTTOP_X(int_x), TPOS_MSGBOX_TOP_Y(int_y), TSIZE_MSGBOX_LEFTTOP_WIDTH, TSIZE_MSGBOX_TOP_HEIGHT, TUV_MSGBOX_LEFTTOP_BEGIN, TUV_MSGBOX_LEFTTOP_END); \
_Int_MsgBox_TopLeft->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc); \
_Int_MsgBox_TopMiddle = new UISprite(manager, owner, &INTERFACES::Data[INTERFACES::MSGBOX_TOP], TUV_MSGBOX_SCREENWIDTH, TUV_MSGBOX_SCREENHEIGHT, TPOS_MSGBOX_MIDDLETOP_X(int_x), TPOS_MSGBOX_TOP_Y(int_y), TSIZE_MSGBOX_MIDDLETOP_WIDTH(int_width), TSIZE_MSGBOX_TOP_HEIGHT, TUV_MSGBOX_MIDDLETOP_BEGIN, TUV_MSGBOX_MIDDLETOP_END); \
_Int_MsgBox_TopMiddle->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc); \
_Int_MsgBox_TopRight = new UISprite(manager, owner, &INTERFACES::Data[INTERFACES::MSGBOX_TOP], TUV_MSGBOX_SCREENWIDTH, TUV_MSGBOX_SCREENHEIGHT, TPOS_MSGBOX_RIGHTTOP_X(int_x, int_width), TPOS_MSGBOX_TOP_Y(int_y), TSIZE_MSGBOX_RIGHTTOP_WIDTH, TSIZE_MSGBOX_TOP_HEIGHT, TUV_MSGBOX_RIGHTTOP_BEGIN, TUV_MSGBOX_RIGHTTOP_END); \
_Int_MsgBox_TopRight->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc); \
_Int_MsgBox_MiddleLeft = new UISprite(manager, owner, &INTERFACES::Data[INTERFACES::MSGBOX_MIDDLE], TUV_MSGBOX_SCREENWIDTH, TUV_MSGBOX_SCREENHEIGHT, TPOS_MSGBOX_LEFTMIDDLE_X(int_x), TPOS_MSGBOX_MIDDLE_Y(int_y, int_height), TSIZE_MSGBOX_LEFTMIDDLE_WIDTH, TSIZE_MSGBOX_MIDDLE_HEIGHT(int_height), TUV_MSGBOX_MIDDLELEFT_BEGIN, TUV_MSGBOX_MIDDLELEFT_END); \
_Int_MsgBox_MiddleLeft->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc); \
_Int_MsgBox_MiddleRight = new UISprite(manager, owner, &INTERFACES::Data[INTERFACES::MSGBOX_MIDDLE], TUV_MSGBOX_SCREENWIDTH, TUV_MSGBOX_SCREENHEIGHT, TPOS_MSGBOX_RIGHTMIDDLE_X(int_x, int_width), TPOS_MSGBOX_MIDDLE_Y(int_y, int_height), TSIZE_MSGBOX_RIGHTMIDDLE_WIDTH, TSIZE_MSGBOX_MIDDLE_HEIGHT(int_height), TUV_MSGBOX_MIDDLERIGHT_BEGIN, TUV_MSGBOX_MIDDLERIGHT_END); \
_Int_MsgBox_MiddleRight->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc); \
_Int_MsgBox_BottomLeft = new UISprite(manager, owner, &INTERFACES::Data[INTERFACES::MSGBOX_BOTTOM], TUV_MSGBOX_SCREENWIDTH, TUV_MSGBOX_SCREENHEIGHT, TPOS_MSGBOX_LEFTBOTTOM_X(int_x), TPOS_MSGBOX_BOTTOM_Y(int_y, int_height), TSIZE_MSGBOX_LEFTBOTTOM_WIDTH, TSIZE_MSGBOX_BOTTOM_HEIGHT, TUV_MSGBOX_LEFTBOTTOM_BEGIN, TUV_MSGBOX_LEFTBOTTOM_END); \
_Int_MsgBox_BottomLeft->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc); \
_Int_MsgBox_BottomMiddle = new UISprite(manager, owner, &INTERFACES::Data[INTERFACES::MSGBOX_BOTTOM], TUV_MSGBOX_SCREENWIDTH, TUV_MSGBOX_SCREENHEIGHT, TPOS_MSGBOX_MIDDLEBOTTOM_X(int_x), TPOS_MSGBOX_BOTTOM_Y(int_y, int_height), TSIZE_MSGBOX_MIDDLEBOTTOM_WIDTH(int_width), TSIZE_MSGBOX_BOTTOM_HEIGHT, TUV_MSGBOX_MIDDLEBOTTOM_BEGIN, TUV_MSGBOX_MIDDLEBOTTOM_END); \
_Int_MsgBox_BottomMiddle->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc); \
_Int_MsgBox_BottomRight = new UISprite(manager, owner, &INTERFACES::Data[INTERFACES::MSGBOX_BOTTOM], TUV_MSGBOX_SCREENWIDTH, TUV_MSGBOX_SCREENHEIGHT, TPOS_MSGBOX_RIGHTBOTTOM_X(int_x, int_width), TPOS_MSGBOX_BOTTOM_Y(int_y, int_height), TSIZE_MSGBOX_RIGHTBOTTOM_WIDTH, TSIZE_MSGBOX_BOTTOM_HEIGHT, TUV_MSGBOX_RIGHTBOTTOM_BEGIN, TUV_MSGBOX_RIGHTBOTTOM_END); \
_Int_MsgBox_BottomRight->SetBlendState(EBlendState::eAlphaSrc_InvAlphaSrc); \
}

#define TMSGBOX_RENDERBACK \
{ \
_Int_MsgBox_Back->Draw(); \
}

#define TMSGBOX_RENDERFRONT \
{ \
_Int_MsgBox_TopMiddle->Draw(); \
_Int_MsgBox_TopLeft->Draw(); \
_Int_MsgBox_TopRight->Draw(); \
_Int_MsgBox_MiddleLeft->Draw(); \
_Int_MsgBox_MiddleRight->Draw(); \
_Int_MsgBox_BottomMiddle->Draw(); \
_Int_MsgBox_BottomLeft->Draw(); \
_Int_MsgBox_BottomRight->Draw(); \
}
#ifndef __GNUC__
#pragma endregion
#endif

#endif